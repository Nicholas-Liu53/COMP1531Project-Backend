============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-6.2.3, py-1.10.0, pluggy-0.13.1
rootdir: /tmp_amd/kamen/export/kamen/3/cs1531/automark/tempstore, configfile: pytest.ini
plugins: forked-1.3.0, xdist-2.2.1, hypothesis-6.1.1, timeout-1.4.2
collected 247 items

http_tests/admin_tests/test_admin_user_remove.py FFFFFFs...F             [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py .....F        [  6%]
http_tests/auth_tests/test_auth_login.py .F..                            [  8%]
http_tests/auth_tests/test_auth_logout.py FF                             [  9%]
http_tests/auth_tests/test_auth_register.py ............................ [ 20%]
.                                                                        [ 21%]
http_tests/channel_tests/test_channel_addowner.py ......s.F              [ 24%]
http_tests/channel_tests/test_channel_details.py ...F                    [ 26%]
http_tests/channel_tests/test_channel_invite.py sF....F                  [ 29%]
http_tests/channel_tests/test_channel_join.py FF.s.F                     [ 31%]
http_tests/channel_tests/test_channel_leave.py F..F                      [ 33%]
http_tests/channel_tests/test_channel_messages.py ..F....F               [ 36%]
http_tests/channel_tests/test_channel_removeowner.py ..FF..s.F           [ 40%]
http_tests/channels_tests/test_channels_create.py ....F                  [ 42%]
http_tests/channels_tests/test_channels_list.py ........F                [ 45%]
http_tests/channels_tests/test_channels_listall.py ....F                 [ 47%]
http_tests/dm_tests/test_dm_create.py ....F                              [ 49%]
http_tests/dm_tests/test_dm_details.py ...F                              [ 51%]
http_tests/dm_tests/test_dm_invite.py s....F                             [ 53%]
http_tests/dm_tests/test_dm_leave.py ...F                                [ 55%]
http_tests/dm_tests/test_dm_list.py ....F                                [ 57%]
http_tests/dm_tests/test_dm_messages.py ..F....F                         [ 60%]
http_tests/dm_tests/test_dm_remove.py ....F                              [ 62%]
http_tests/echo_tests/echo_test.py ..                                    [ 63%]
http_tests/message_tests/test_message_edit.py ...F.F.F                   [ 66%]
http_tests/message_tests/test_message_remove.py .....F                   [ 69%]
http_tests/message_tests/test_message_send.py ..s.F                      [ 71%]
http_tests/message_tests/test_message_senddm.py ..s.F                    [ 73%]
http_tests/message_tests/test_message_share.py FFFF..ssssssF             [ 78%]
http_tests/other_tests/test_clear.py .                                   [ 78%]
http_tests/other_tests/test_notifications_get.py ...Fsss..ss.F...F       [ 85%]
http_tests/other_tests/test_search.py .......F                           [ 89%]
http_tests/other_tests/test_users_all.py .F                              [ 89%]
http_tests/user_tests/test_user_profile.py ..F                           [ 91%]
http_tests/user_tests/test_user_profile_setemail.py ........F            [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py F.....F             [ 97%]
http_tests/user_tests/test_user_profile_setname.py .....F                [100%]

=================================== FAILURES ===================================
________________________ test_removal_can_do_no_action _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...iJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
ctx = None

    def test_removal_can_do_no_action(user_woody, user_zerg, woodys_public_toybox, ctx):
        admin_user_remove(user_woody.token, user_zerg.u_id, ctx)
    
        # assert auth_logout(user_zerg.token, ctx)['is_success'] is False
        with pytest.raises(AccessError):
>           auth_logout(user_zerg.token, ctx)['is_success']

http_tests/admin_tests/test_admin_user_remove.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
_____________________ test_removal_messages_correct_format _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...iJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f9876553ae8>
ctx = None

    def test_removal_messages_correct_format(user_woody, user_zerg, woodys_public_toybox, message_factory, ctx):
        channel_join(user_zerg.token, woodys_public_toybox.channel_id, ctx)
        message_factory(user_zerg, woodys_public_toybox, 'hi')
    
        admin_user_remove(user_woody.token, user_zerg.u_id, ctx)
    
        zergs_msg = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)['messages'][0]
>       assert zergs_msg['message'] == 'Removed user'
E       AssertionError: assert 'Removed User' == 'Removed user'
E         - Removed user
E         ?         ^
E         + Removed User
E         ?         ^

http_tests/admin_tests/test_admin_user_remove.py:33: AssertionError
_____________________ test_removal_profile_still_fetchable _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...iJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo', handle_str='lordzerg')
ctx = None

    def test_removal_profile_still_fetchable(user_woody, user_zerg, ctx):
        admin_user_remove(user_woody.token, user_zerg.u_id, ctx)
    
        profile = user_profile(user_woody.token, user_zerg.u_id, ctx)['user']
    
>       assert profile['handle_str'] == 'Removed user' or f'{profile["name_first"]}{profile["name_last"]}' == 'Removed user' or f'{profile["name_first"]} {profile["name_last"]}' == 'Removed user'
E       AssertionError: assert ('lordzerg' == 'Removed user'
E         - Removed user
E         + lordzerg or 'RemovedUser' == 'Removed user'
E         - Removed user
E         ?        ^^
E         + RemovedUser
E         ?        ^ or 'Removed User' == 'Removed user'
E         - Removed user
E         ?         ^
E         + Removed User
E         ?         ^)

http_tests/admin_tests/test_admin_user_remove.py:41: AssertionError
______________________ test_removal_removed_from_channel _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...iJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
ctx = None

    def test_removal_removed_from_channel(user_woody, user_zerg, woodys_public_toybox, ctx):
        channel_join(user_zerg.token, woodys_public_toybox.channel_id, ctx)
    
        admin_user_remove(user_woody.token, user_zerg.u_id, ctx)
    
        members = channel_details(user_woody.token, woodys_public_toybox.channel_id, ctx)['all_members']
    
>       assert user_zerg.u_id not in [m['u_id'] for m in members]
E       AssertionError: assert 1 not in [0, 1]
E        +  where 1 = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...iJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo', handle_str='lordzerg').u_id

http_tests/admin_tests/test_admin_user_remove.py:51: AssertionError
_________________________ test_removal_removed_from_dm _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...iJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo', handle_str='lordzerg')
woody_and_buzz_dm = DM(owner=0, members=[2], name='buzzlightyear, sheriffwoody', dm_id=0)
ctx = None

    def test_removal_removed_from_dm(user_woody, user_zerg, woody_and_buzz_dm, ctx):
        dm_invite(user_woody.token, woody_and_buzz_dm.dm_id, user_zerg.u_id, ctx)
    
        admin_user_remove(user_woody.token, user_zerg.u_id, ctx)
    
        members = dm_details(user_woody.token, woody_and_buzz_dm.dm_id, ctx)['members']
    
>       assert user_zerg.u_id not in [m['u_id'] for m in members]
E       AssertionError: assert 1 not in [0, 2, 1]
E        +  where 1 = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...iJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo', handle_str='lordzerg').u_id

http_tests/admin_tests/test_admin_user_remove.py:61: AssertionError
________________________ test_removal_not_in_users_all _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...iJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo', handle_str='lordzerg')
ctx = None

    def test_removal_not_in_users_all(user_woody, user_zerg, ctx):
        admin_user_remove(user_woody.token, user_zerg.u_id, ctx)
    
        users = users_all(user_woody.token, ctx)['users']
    
>       assert user_zerg.u_id not in [u['u_id'] for u in users]
E       AssertionError: assert 1 not in [0, 1]
E        +  where 1 = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...iJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo', handle_str='lordzerg').u_id

http_tests/admin_tests/test_admin_user_remove.py:69: AssertionError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...I1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo', handle_str='buzzlightyear')
ctx = None

    def test_invalid_token(user_woody, user_buzz, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/admin_tests/test_admin_user_remove.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...I1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo', handle_str='buzzlightyear')
ctx = None

    def test_invalid_token(user_woody, user_buzz, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/admin_tests/test_admin_userpermission_change.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
__________________________ test_can_have_two_sessions __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
ctx = None

    def test_can_have_two_sessions(user_woody, ctx):
        session2 = auth_login(user_woody.email, user_woody.password, ctx)
    
        # succeeds
        assert user_profile(session2['token'], user_woody.u_id, ctx) == user_profile(user_woody.token, user_woody.u_id, ctx)
    
>       assert auth_logout(session2['token'], ctx)

http_tests/auth_tests/test_auth_login.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
____________________________ test_successful_logout ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
ctx = None

    def test_successful_logout(user_woody, ctx):
>       _, is_success = auth_logout(user_woody.token, ctx).popitem()

http_tests/auth_tests/test_auth_logout.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
__________________________ test_not_logged_in_logout ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
ctx = None

    def test_not_logged_in_logout(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/auth_tests/test_auth_logout.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...I1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo', handle_str='buzzlightyear')
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, user_buzz, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/channel_tests/test_channel_addowner.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/channel_tests/test_channel_details.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
___________________________ test_invite_global_owner ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...iJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo', handle_str='lordzerg')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=0, owner_members=[1], all_members=[])
ctx = None

    def test_invite_global_owner(user_woody, user_zerg, zergs_private_lair, ctx):
        channel_invite(user_zerg.token, zergs_private_lair.channel_id, user_woody.u_id, ctx)
    
        ch_deets = channel_details(user_woody.token, zergs_private_lair.channel_id, ctx)
    
        assert user_woody.u_id in [k['u_id'] for k in ch_deets['all_members']]
>       assert user_woody.u_id in [k['u_id'] for k in ch_deets['owner_members']]
E       AssertionError: assert 0 in [1]
E        +  where 0 = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody').u_id

http_tests/channel_tests/test_channel_invite.py:28: AssertionError
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...I1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo', handle_str='buzzlightyear')
ctx = None

    def test_invalidated_token(user_woody, woodys_public_toybox, user_buzz, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/channel_tests/test_channel_invite.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
____________________ test_global_owner_join_channel_public _____________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=0, to...I1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[1], all_members=[])
ctx = None

    def test_global_owner_join_channel_public(user_buzz, woodys_public_toybox, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        ch_deets = channel_details(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        assert user_buzz.u_id in [k['u_id'] for k in ch_deets['all_members']]
>       assert user_buzz.u_id in [k['u_id'] for k in ch_deets['owner_members']]
E       AssertionError: assert 0 in [1]
E        +  where 0 = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=0, to...I1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='buzzlightyear').u_id

http_tests/channel_tests/test_channel_join.py:17: AssertionError
____________________ test_global_owner_join_channel_private ____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=0, owner_members=[1], all_members=[])
ctx = None

    def test_global_owner_join_channel_private(user_woody, zergs_private_lair, ctx):
        channel_join(user_woody.token, zergs_private_lair.channel_id, ctx)
    
        ch_deets = channel_details(user_woody.token, zergs_private_lair.channel_id, ctx)
    
        assert user_woody.u_id in [k['u_id'] for k in ch_deets['all_members']]
>       assert user_woody.u_id in [k['u_id'] for k in ch_deets['owner_members']]
E       AssertionError: assert 0 in [1]
E        +  where 0 = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody').u_id

http_tests/channel_tests/test_channel_join.py:26: AssertionError
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
ctx = None

    def test_invalidated_token(user_woody, woodys_public_toybox, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/channel_tests/test_channel_join.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
____________________ test_member_leave_channel_successfully ____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
ctx = None

    def test_member_leave_channel_successfully(user_woody, woodys_public_toybox, ctx):
>       channel_leave(user_woody.token, woodys_public_toybox.channel_id, ctx)

http_tests/channel_tests/test_channel_leave.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:47: in channel_leave
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:69: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/channel_tests/test_channel_leave.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
________________________ test_removal_by_edit_reflected ________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
ctx = None

    def test_removal_by_edit_reflected(woodys_public_toybox, user_woody, ctx):
        msg = message_send(user_woody.token, woodys_public_toybox.channel_id, 'you are a toy maybe?', ctx)['message_id']
    
        ch_msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)
        assert ch_msgs['start'] == 0
        assert ch_msgs['end'] == -1
        assert msg in [m['message_id'] for m in ch_msgs['messages']]
    
>       message_edit(user_woody.token, msg, '', ctx)

http_tests/channel_tests/test_channel_messages.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:35: in message_edit
    token=token, message_id=message_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ test_access_error_when_invalid_token_given __________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
ctx = None

    def test_access_error_when_invalid_token_given(user_woody, woodys_public_toybox, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/channel_tests/test_channel_messages.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
______________________ test_nonmember_cannot_remove_owner ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...I1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo', handle_str='buzzlightyear')
ctx = None

    def test_nonmember_cannot_remove_owner(user_woody, woodys_public_toybox, user_buzz, ctx):
        with pytest.raises(AccessError):
>           channel_removeowner(user_buzz.token, woodys_public_toybox.channel_id, user_woody.u_id, ctx)

http_tests/channel_tests/test_channel_removeowner.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:80: in channel_removeowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:69: InputError
_______________________ test_member_cannot_remove_owner ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...I1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo', handle_str='buzzlightyear')
ctx = None

    def test_member_cannot_remove_owner(user_woody, woodys_public_toybox, user_buzz, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
        with pytest.raises(AccessError):
>           channel_removeowner(user_buzz.token, woodys_public_toybox.channel_id, user_woody.u_id, ctx)

http_tests/channel_tests/test_channel_removeowner.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:80: in channel_removeowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:69: InputError
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...I1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo', handle_str='buzzlightyear')
ctx = None

    def test_invalidated_token(user_woody, woodys_public_toybox, user_buzz, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/channel_tests/test_channel_removeowner.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
ctx = None

    def test_invalidated_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/channels_tests/test_channels_create.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
ctx = None

    def test_invalidated_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/channels_tests/test_channels_list.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
ctx = None

    def test_invalidated_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/channels_tests/test_channels_listall.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/dm_tests/test_dm_create.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dm_id=0)
ctx = None

    def test_invalid_token(user_woody, woody_and_buzz_dm, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/dm_tests/test_dm_details.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dm_id=0)
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...I1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo', handle_str='buzzlightyear')
ctx = None

    def test_invalidated_token(user_woody, woody_and_buzz_dm, user_buzz, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/dm_tests/test_dm_invite.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dm_id=0)
ctx = None

    def test_invalid_token(user_woody, woody_and_buzz_dm, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/dm_tests/test_dm_leave.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
ctx = None

    def test_invalidated_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/dm_tests/test_dm_list.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
________________________ test_removal_by_edit_reflected ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dm_id=0)
ctx = None

    def test_removal_by_edit_reflected(user_woody, woody_and_buzz_dm, ctx):
        msg = message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy maybe?', ctx)['message_id']
    
        dm_msgs = dm_messages(user_woody.token, woody_and_buzz_dm.dm_id, 0, ctx)
        assert dm_msgs['start'] == 0
        assert dm_msgs['end'] == -1
        assert msg in [m['message_id'] for m in dm_msgs['messages']]
    
>       message_edit(user_woody.token, msg, '', ctx)

http_tests/dm_tests/test_dm_messages.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:35: in message_edit
    token=token, message_id=message_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
__________________ test_access_error_when_invalid_token_given __________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dm_id=0)
ctx = None

    def test_access_error_when_invalid_token_given(user_woody, woody_and_buzz_dm, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/dm_tests/test_dm_messages.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dm_id=0)
ctx = None

    def test_invalid_token(user_woody, woody_and_buzz_dm, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/dm_tests/test_dm_remove.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
_______________________ test_empty_edit_deletes_message ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f98764d68c8>
ctx = None

    def test_empty_edit_deletes_message(user_woody, woodys_public_toybox, message_factory, ctx):
        woodys_msg = message_factory(user_woody, woodys_public_toybox)
>       message_edit(user_woody.token, woodys_msg.message_id, '', ctx)

http_tests/message_tests/test_message_edit.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:35: in message_edit
    token=token, message_id=message_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________________ test_cannot_edit_deleted_message _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f987657ce18>
ctx = None

    def test_cannot_edit_deleted_message(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox, 'hi')
    
        # should succeed
>       message_edit(user_woody.token, a_msg.message_id, '', ctx)

http_tests/message_tests/test_message_edit.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:35: in message_edit
    token=token, message_id=message_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f98764f08c8>
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
>       auth_logout(user_woody.token, ctx)

http_tests/message_tests/test_message_edit.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f9876497510>
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
>       auth_logout(user_woody.token, ctx)

http_tests/message_tests/test_message_remove.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/message_tests/test_message_send.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dm_id=0)
ctx = None

    def test_invalid_token(user_woody, woody_and_buzz_dm, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/message_tests/test_message_senddm.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
_______________________ test_successful_share_to_channel _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f98764a7d08>
ctx = None

    def test_successful_share_to_channel(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox, 'hi')
    
        shared_msg = message_share(user_woody.token, a_msg.message_id, 'amazing', woodys_public_toybox.channel_id, -1, ctx)
    
>       assert 'shared_message_id' in shared_msg
E       AssertionError: assert 'shared_message_id' in {'message_id': 1}

http_tests/message_tests/test_message_share.py:19: AssertionError
_________________________ test_successful_share_to_dm __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dm_id=0)
message_factory = <function message_factory.<locals>.make_message at 0x7f98764c18c8>
ctx = None

    def test_successful_share_to_dm(user_woody, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm, 'hi')
    
        shared_msg = message_share(user_woody.token, a_msg.message_id, 'amazing', -1, woody_and_buzz_dm.dm_id, ctx)
    
>       assert 'shared_message_id' in shared_msg
E       AssertionError: assert 'shared_message_id' in {'message_id': 1}

http_tests/message_tests/test_message_share.py:31: AssertionError
______________________ test_successful_cross_share[True] _______________________

to_ch = True
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dm_id=0)
message_factory = <function message_factory.<locals>.make_message at 0x7f98765051e0>
ctx = None

    @pytest.mark.parametrize('to_ch', [True, False])
    def test_successful_cross_share(to_ch, user_woody, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        if to_ch:
            a_msg = message_factory(user_woody, woody_and_buzz_dm, 'hi')
            cross = message_share(user_woody.token, a_msg.message_id, 'amazing', woodys_public_toybox.channel_id, -1, ctx)
            msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)
        else:
            a_msg = message_factory(user_woody, woodys_public_toybox, 'hi')
            cross = message_share(user_woody.token, a_msg.message_id, 'amazing', -1, woody_and_buzz_dm.dm_id, ctx)
            msgs = dm_messages(user_woody.token, woody_and_buzz_dm.dm_id, 0, ctx)
    
>       assert 'shared_message_id' in cross
E       AssertionError: assert 'shared_message_id' in {'message_id': 1}

http_tests/message_tests/test_message_share.py:49: AssertionError
______________________ test_successful_cross_share[False] ______________________

to_ch = False
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dm_id=0)
message_factory = <function message_factory.<locals>.make_message at 0x7f98764719d8>
ctx = None

    @pytest.mark.parametrize('to_ch', [True, False])
    def test_successful_cross_share(to_ch, user_woody, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        if to_ch:
            a_msg = message_factory(user_woody, woody_and_buzz_dm, 'hi')
            cross = message_share(user_woody.token, a_msg.message_id, 'amazing', woodys_public_toybox.channel_id, -1, ctx)
            msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)
        else:
            a_msg = message_factory(user_woody, woodys_public_toybox, 'hi')
            cross = message_share(user_woody.token, a_msg.message_id, 'amazing', -1, woody_and_buzz_dm.dm_id, ctx)
            msgs = dm_messages(user_woody.token, woody_and_buzz_dm.dm_id, 0, ctx)
    
>       assert 'shared_message_id' in cross
E       AssertionError: assert 'shared_message_id' in {'message_id': 1}

http_tests/message_tests/test_message_share.py:49: AssertionError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f98764c12f0>
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
>       auth_logout(user_woody.token, ctx)

http_tests/message_tests/test_message_share.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
______________ test_tag_thru_message_share_triggers_notification _______________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f98764742f0>
ctx = None

    def test_tag_thru_message_share_triggers_notification(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
    
        message_share(user_woody.token, a_msg.message_id, f'@{user_woody.handle_str}', woodys_public_toybox.channel_id, -1,
                      ctx)
    
        notifs = notifications_get(user_woody.token, ctx)['notifications']
    
>       assert len(notifs) == 1
E       AssertionError: assert 2 == 1
E        +  where 2 = len([{'channel_id': 0, 'dm_id': -1, 'notification_message': 'sheriffwoody tagged you in woodys toybox: Init Commit | @sher...channel_id': 0, 'dm_id': -1, 'notification_message': 'sheriffwoody tagged you in woodys toybox: Init Commit | @sheri'}])

http_tests/other_tests/test_notifications_get.py:65: AssertionError
_______________ test_add_thru_ch_addowner_triggers_notification ________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...I1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f9876604730>
ctx = None

    def test_add_thru_ch_addowner_triggers_notification(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_addowner(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        notifs = notifications_get(user_buzz.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channel_id': woodys_public_toybox.channel_id,
            'dm_id': -1,
            'notification_message': f'{user_woody.handle_str} added you to {woodys_public_toybox.name}'
        }]}
E       AssertionError: assert {'notifications': []} == {'notificatio...dys toybox'}]}
E         Differing items:
E         {'notifications': []} != {'notifications': [{'channel_id': 0, 'dm_id': -1, 'notification_message': 'sheriffwoody added you to woodys toybox'}]}
E         Use -v to get the full diff

http_tests/other_tests/test_notifications_get.py:179: AssertionError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/other_tests/test_notifications_get.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/other_tests/test_search.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/other_tests/test_users_all.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/user_tests/test_user_profile.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/user_tests/test_user_profile_setemail.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
________________________ test_successful_handle_change _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
ctx = None

    def test_successful_handle_change(user_woody, ctx):
        new_handle = 'www'
>       user_profile_sethandle(user_woody.token, new_handle, ctx)

http_tests/user_tests/test_user_profile_sethandle.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:46: in user_profile_sethandle
    token=token, handle_str=handle_str
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/user_tests/test_user_profile_sethandle.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
>       auth_logout(user_woody.token, ctx)

http_tests/user_tests/test_user_profile_setname.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [405]>

    def parse_response(res):
        if res.status_code == 200:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [405]>

http_tests/fakepi/util.py:73: InputError
=========================== short test summary info ============================
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_can_do_no_action
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_messages_correct_format
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_profile_still_fetchable
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_channel
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_dm
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_not_in_users_all
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_invalid_token
FAILED http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_token
FAILED http_tests/auth_tests/test_auth_login.py::test_can_have_two_sessions
FAILED http_tests/auth_tests/test_auth_logout.py::test_successful_logout - ht...
FAILED http_tests/auth_tests/test_auth_logout.py::test_not_logged_in_logout
FAILED http_tests/channel_tests/test_channel_addowner.py::test_invalid_token
FAILED http_tests/channel_tests/test_channel_details.py::test_invalid_token
FAILED http_tests/channel_tests/test_channel_invite.py::test_invite_global_owner
FAILED http_tests/channel_tests/test_channel_invite.py::test_invalidated_token
FAILED http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_public
FAILED http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_private
FAILED http_tests/channel_tests/test_channel_join.py::test_invalidated_token
FAILED http_tests/channel_tests/test_channel_leave.py::test_member_leave_channel_successfully
FAILED http_tests/channel_tests/test_channel_leave.py::test_invalid_token - h...
FAILED http_tests/channel_tests/test_channel_messages.py::test_removal_by_edit_reflected
FAILED http_tests/channel_tests/test_channel_messages.py::test_access_error_when_invalid_token_given
FAILED http_tests/channel_tests/test_channel_removeowner.py::test_nonmember_cannot_remove_owner
FAILED http_tests/channel_tests/test_channel_removeowner.py::test_member_cannot_remove_owner
FAILED http_tests/channel_tests/test_channel_removeowner.py::test_invalidated_token
FAILED http_tests/channels_tests/test_channels_create.py::test_invalidated_token
FAILED http_tests/channels_tests/test_channels_list.py::test_invalidated_token
FAILED http_tests/channels_tests/test_channels_listall.py::test_invalidated_token
FAILED http_tests/dm_tests/test_dm_create.py::test_invalid_token - http_tests...
FAILED http_tests/dm_tests/test_dm_details.py::test_invalid_token - http_test...
FAILED http_tests/dm_tests/test_dm_invite.py::test_invalidated_token - http_t...
FAILED http_tests/dm_tests/test_dm_leave.py::test_invalid_token - http_tests....
FAILED http_tests/dm_tests/test_dm_list.py::test_invalidated_token - http_tes...
FAILED http_tests/dm_tests/test_dm_messages.py::test_removal_by_edit_reflected
FAILED http_tests/dm_tests/test_dm_messages.py::test_access_error_when_invalid_token_given
FAILED http_tests/dm_tests/test_dm_remove.py::test_invalid_token - http_tests...
FAILED http_tests/message_tests/test_message_edit.py::test_empty_edit_deletes_message
FAILED http_tests/message_tests/test_message_edit.py::test_cannot_edit_deleted_message
FAILED http_tests/message_tests/test_message_edit.py::test_invalid_token - ht...
FAILED http_tests/message_tests/test_message_remove.py::test_invalid_token - ...
FAILED http_tests/message_tests/test_message_send.py::test_invalid_token - ht...
FAILED http_tests/message_tests/test_message_senddm.py::test_invalid_token - ...
FAILED http_tests/message_tests/test_message_share.py::test_successful_share_to_channel
FAILED http_tests/message_tests/test_message_share.py::test_successful_share_to_dm
FAILED http_tests/message_tests/test_message_share.py::test_successful_cross_share[True]
FAILED http_tests/message_tests/test_message_share.py::test_successful_cross_share[False]
FAILED http_tests/message_tests/test_message_share.py::test_invalid_token - h...
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_share_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_add_thru_ch_addowner_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_invalid_token
FAILED http_tests/other_tests/test_search.py::test_invalid_token - http_tests...
FAILED http_tests/other_tests/test_users_all.py::test_invalid_token - http_te...
FAILED http_tests/user_tests/test_user_profile.py::test_invalid_token - http_...
FAILED http_tests/user_tests/test_user_profile_setemail.py::test_invalid_token
FAILED http_tests/user_tests/test_user_profile_sethandle.py::test_successful_handle_change
FAILED http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_token
FAILED http_tests/user_tests/test_user_profile_setname.py::test_invalid_token
================= 57 failed, 171 passed, 19 skipped in 11.07s ==================
