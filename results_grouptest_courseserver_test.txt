============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-6.2.3, py-1.10.0, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/tmp_amd/kamen/export/kamen/3/cs1531/automark/tempstore/.hypothesis/examples')
rootdir: /tmp_amd/kamen/export/kamen/3/cs1531/automark/tempstore, configfile: pytest.ini
plugins: forked-1.3.0, xdist-2.2.1, hypothesis-6.1.1, timeout-1.4.2
collecting ... collected 131 items

http_tests/admin_http_test.py::test_http_admin_user_remove_valid FAILED  [  0%]
http_tests/admin_http_test.py::test_http_userpermissions_change FAILED   [  1%]
http_tests/admin_http_test.py::test_http_admin_user_remove_valid FAILED  [  1%]
http_tests/admin_http_test.py::test_http_userpermissions_change FAILED   [  1%]
http_tests/auth_http_test.py::test_http_auth_login_valid FAILED          [  2%]
http_tests/auth_http_test.py::test_http_auth_login_invalid_email PASSED  [  3%]
http_tests/auth_http_test.py::test_http_auth_login_invalid_not_registered_email PASSED [  3%]
http_tests/auth_http_test.py::test_http_auth_login_invalid_incorrect_password PASSED [  4%]
http_tests/auth_http_test.py::test_http_auth_register_valid FAILED       [  5%]
http_tests/auth_http_test.py::test_http_auth_register_invalid_email PASSED [  6%]
http_tests/auth_http_test.py::test_http_auth_register_invalid_email_in_use PASSED [  6%]
http_tests/auth_http_test.py::test_http_auth_register_invalid_password PASSED [  7%]
http_tests/auth_http_test.py::test_http_auth_register_invalid_empty_first_name PASSED [  8%]
http_tests/auth_http_test.py::test_http_auth_register_invalid_long_first_name PASSED [  9%]
http_tests/auth_http_test.py::test_http_auth_register_invalid_empty_last_name PASSED [  9%]
http_tests/auth_http_test.py::test_http_auth_register_invalid_long_last_name PASSED [ 10%]
http_tests/auth_http_test.py::test_http_auth_logout_valid FAILED         [ 11%]
http_tests/auth_http_test.py::test_http_auth_logout_v1_invalid PASSED    [ 12%]
http_tests/auth_http_test.py::test_http_auth_passwordreset_valid_email FAILED [ 12%]
http_tests/auth_http_test.py::test_http_auth_passwordreset_invalid_email PASSED [ 13%]
http_tests/auth_http_test.py::test_http_auth_passwordreset_invalid_reset PASSED [ 14%]
http_tests/channel_http_test.py::test_http_channel_invite FAILED         [ 15%]
http_tests/channel_http_test.py::test_http_channel_details FAILED        [ 16%]
http_tests/channel_http_test.py::test_http_channel_leave FAILED          [ 16%]
http_tests/channel_http_test.py::test_http_channel_join FAILED           [ 17%]
http_tests/channel_http_test.py::test_http_channel_addowner FAILED       [ 18%]
http_tests/channel_http_test.py::test_http_channel_removeowner FAILED    [ 19%]
http_tests/channel_http_test.py::test_http_channel_messages PASSED       [ 19%]
http_tests/channel_http_test.py::test_http_channel_messages_valid PASSED [ 20%]
http_tests/channels_http_test.py::test_http_channels_create PASSED       [ 21%]
http_tests/channels_http_test.py::test_http_channels_list_valid PASSED   [ 22%]
http_tests/channels_http_test.py::test_http_channels_listall_valid PASSED [ 22%]
http_tests/channels_http_test.py::test_http_channels_listall_private PASSED [ 23%]
http_tests/channels_http_test.py::test_http_channels_list_invalid_token PASSED [ 24%]
http_tests/channels_http_test.py::test_http_channels_listall_valid_invalid_token PASSED [ 25%]
http_tests/dm_http_test.py::test_http_dm_details_valid FAILED            [ 25%]
http_tests/dm_http_test.py::test_http_dm_details_invalid_dm_id PASSED    [ 26%]
http_tests/dm_http_test.py::test_http_dm_details_not_in_dm PASSED        [ 27%]
http_tests/dm_http_test.py::test_http_dm_list_none PASSED                [ 28%]
http_tests/dm_http_test.py::test_http_dm_list PASSED                     [ 29%]
http_tests/dm_http_test.py::test_http_dm_create PASSED                   [ 29%]
http_tests/dm_http_test.py::test_http_dm_create_invalid_u_ids PASSED     [ 30%]
http_tests/dm_http_test.py::test_http_dm_remove_invalid_DM PASSED        [ 31%]
http_tests/dm_http_test.py::test_http_dm_remove_fail PASSED              [ 32%]
http_tests/dm_http_test.py::test_http_dm_remove_success PASSED           [ 32%]
http_tests/dm_http_test.py::test_http_dm_invite_invalid_dm PASSED        [ 33%]
http_tests/dm_http_test.py::test_http_dm_invite_fail PASSED              [ 34%]
http_tests/dm_http_test.py::test_http_dm_invite_access_error FAILED      [ 35%]
http_tests/dm_http_test.py::test_http_dm_invite_success PASSED           [ 35%]
http_tests/dm_http_test.py::test_http_dm_leave PASSED                    [ 36%]
http_tests/dm_http_test.py::test_http_dm_messages_invalid_dm PASSED      [ 37%]
http_tests/dm_http_test.py::test_http_dm_messages_invalid_start PASSED   [ 38%]
http_tests/dm_http_test.py::test_http_dm_messages_access_error PASSED    [ 38%]
http_tests/dm_http_test.py::test_http_dm_messages FAILED                 [ 39%]
http_tests/echo_http_test.py::test_echo FAILED                           [ 40%]
http_tests/message_http_test.py::test_http_message_send PASSED           [ 41%]
http_tests/message_http_test.py::test_http_message_edit PASSED           [ 41%]
http_tests/message_http_test.py::test_http_message_remove PASSED         [ 42%]
http_tests/message_http_test.py::test_http_message_share_todm PASSED     [ 43%]
http_tests/message_http_test.py::test_http_senddm_access_error PASSED    [ 44%]
http_tests/message_http_test.py::test_http_senddm_long PASSED            [ 45%]
http_tests/message_http_test.py::test_http_senddm_multiple PASSED        [ 45%]
http_tests/message_http_test.py::test_http_message_pin_valid_channel PASSED [ 46%]
http_tests/message_http_test.py::test_http_message_pin_valid_dm PASSED   [ 47%]
http_tests/message_http_test.py::test_http_message_pin_invalid_mID PASSED [ 48%]
http_tests/message_http_test.py::test_http_message_pin_pinned PASSED     [ 48%]
http_tests/message_http_test.py::test_http_message_pin_not_member PASSED [ 49%]
http_tests/message_http_test.py::test_http_message_unpin_valid_channel PASSED [ 50%]
http_tests/message_http_test.py::test_http_message_unpin_valid_dm PASSED [ 51%]
http_tests/message_http_test.py::test_http_test_message_unpin_invalid_mID PASSED [ 51%]
http_tests/message_http_test.py::test_http_message_unpin_unpinned_ PASSED [ 52%]
http_tests/message_http_test.py::test_http_message_unpin_not_member PASSED [ 53%]
http_tests/message_http_test.py::test_http_message_pin_unauthorised_user PASSED [ 54%]
http_tests/message_http_test.py::test_http_message_react_v1_errors_invalid_mID PASSED [ 54%]
http_tests/message_http_test.py::test_http_message_react_v1_errors_invalid_rID PASSED [ 55%]
http_tests/message_http_test.py::test_http_message_react_v1_active_react PASSED [ 56%]
http_tests/message_http_test.py::test_http_message_react_v1_invalid_user PASSED [ 57%]
http_tests/message_http_test.py::test_http_message_react_v1_valid_channel PASSED [ 58%]
http_tests/message_http_test.py::test_http_message_react_v1_valid_dm PASSED [ 58%]
http_tests/message_http_test.py::test_http_message_unreact_v1_errors_invalid_mID PASSED [ 59%]
http_tests/message_http_test.py::test_http_message_unreact_v1_errors_invalid_rID PASSED [ 60%]
http_tests/message_http_test.py::test_http_message_unreact_v1_active_react PASSED [ 61%]
http_tests/message_http_test.py::test_http_message_unreact_v1_invalid_user PASSED [ 61%]
http_tests/message_http_test.py::test_http_message_unreact_v1_valid_channel PASSED [ 62%]
http_tests/message_http_test.py::test_http_message_unreact_v1_valid_dm PASSED [ 63%]
http_tests/message_http_test.py::test_http_message_sendlater FAILED      [ 64%]
http_tests/message_http_test.py::test_http_message_sendlaterdm FAILED    [ 64%]
http_tests/notifications_http_test.py::test_http_notifications_get_in_channels PASSED [ 65%]
http_tests/notifications_http_test.py::test_http_notifications_dms_added PASSED [ 66%]
http_tests/notifications_http_test.py::test_http_valid_dm_tag PASSED     [ 67%]
http_tests/notifications_http_test.py::test_http_valid_dm_20_chars PASSED [ 67%]
http_tests/notifications_http_test.py::test_http_dm_no_tag PASSED        [ 68%]
http_tests/notifications_http_test.py::test_http_dm_20_notifs PASSED     [ 69%]
http_tests/notifications_http_test.py::test_http_dm_edit_notif PASSED    [ 70%]
http_tests/notifications_http_test.py::test_http_channel_react_notif PASSED [ 70%]
http_tests/notifications_http_test.py::test_http_dm_react_notif PASSED   [ 71%]
http_tests/other_http_test.py::test_http_search_channels FAILED          [ 72%]
http_tests/other_http_test.py::test_http_search_dms FAILED               [ 73%]
http_tests/standup_http_test.py::test_http_standup_start_v1_invalid_cID FAILED [ 74%]
http_tests/standup_http_test.py::test_http_standup_start_v1_active_standup FAILED [ 74%]
http_tests/standup_http_test.py::test_http_standup_start_v1_user_not_in FAILED [ 75%]
http_tests/standup_http_test.py::test_http_standup_start_v1 FAILED       [ 76%]
http_tests/standup_http_test.py::test_http_standup_active_v1_invalid_cID FAILED [ 77%]
http_tests/standup_http_test.py::test_http_standup_active_v1 FAILED      [ 77%]
http_tests/standup_http_test.py::test_http_standup_active_v1_correct_time FAILED [ 78%]
http_tests/standup_http_test.py::test_http_standup_send_v1_invalid_cID FAILED [ 79%]
http_tests/standup_http_test.py::test_http_standup_send_v1_invalid_message FAILED [ 80%]
http_tests/standup_http_test.py::test_http_standup_send_v1_inactive_standup FAILED [ 80%]
http_tests/standup_http_test.py::test_http_standup_send_v1_invalid_user FAILED [ 81%]
http_tests/standup_http_test.py::test_http_standup_send_v1_one_message FAILED [ 82%]
http_tests/standup_http_test.py::test_http_standup_send_v1_correct_channel FAILED [ 83%]
http_tests/standup_http_test.py::test_http_standup_send_v1_multiple_messages FAILED [ 83%]
http_tests/user_http_test.py::test_http_user_profile_errors FAILED       [ 84%]
http_tests/user_http_test.py::test_http_user_profile_default FAILED      [ 85%]
http_tests/user_http_test.py::test_http_user_profile_change FAILED       [ 86%]
http_tests/user_http_test.py::test_http_user_profile_invalid_uid PASSED  [ 87%]
http_tests/user_http_test.py::test_http_user_setname_valid FAILED        [ 87%]
http_tests/user_http_test.py::test_http_user_setname_invalid_long_first_name PASSED [ 88%]
http_tests/user_http_test.py::test_http_user_setname_invalid_long_last_name PASSED [ 89%]
http_tests/user_http_test.py::test_http_user_setname_invalid_no_first_name PASSED [ 90%]
http_tests/user_http_test.py::test_http_user_setname_invalid_no_last_name PASSED [ 90%]
http_tests/user_http_test.py::test_http_user_setemail_valid FAILED       [ 91%]
http_tests/user_http_test.py::test_http_user_setemail_invalid_email PASSED [ 92%]
http_tests/user_http_test.py::test_http_user_setemail_invalid_email_in_use PASSED [ 93%]
http_tests/user_http_test.py::test_http_user_sethandle_valid FAILED      [ 93%]
http_tests/user_http_test.py::test_http_user_sethandle_invalid_short_handle PASSED [ 94%]
http_tests/user_http_test.py::test_http_user_sethandle_invalid_long_handle PASSED [ 95%]
http_tests/user_http_test.py::test_http_user_sethandle_invalid_handle_in_use FAILED [ 96%]
http_tests/user_http_test.py::test_http_users_all_valid FAILED           [ 96%]
http_tests/user_http_test.py::test_http_users_stats_v1 FAILED            [ 97%]
http_tests/user_http_test.py::test_http_user_stat FAILED                 [ 98%]

=================================== FAILURES ===================================
______________________ test_http_admin_user_remove_valid _______________________

user1 = {'auth_user_id': 0, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjAsImxvZ2luX3RpbWUiOjE2MjAwNTI3MzcsInNhbHQiOiIxNzBhNGI3Zi1mY2I1LTRmYWMtOGFjNC03N2Q0MGJmNDZhNGEifQ.8wq1_TvF6-rdDgN3yWUuPZRyvFPOPui3Vft13NAqrPM'}
user2 = {'auth_user_id': 1, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjEsImxvZ2luX3RpbWUiOjE2MjAwNTI3MzcsInNhbHQiOiJmY2Y3ZjM0Ni0wMmZmLTQ1MTItODY2MC00ZDdhYWZlMzQwM2MifQ.3HXbNq-Och5DUVaKQaxyw5ei3TxEf3npjiG8oP1Ky-g'}

    def test_http_admin_user_remove_valid(user1, user2):
    
        chan = requests.post(f"{url}channels/create/v2", json={
            "token": user1[token],
            "name": "Channel",
            "is_public": True
        })
        channelTest = chan.json()
    
        requests.post(f"{url}channel/join/v2", json={
            "token": user2[token],
            "channel_id": channelTest[cID]
        })
    
        msg = requests.post(f"{url}message/send/v2", json={
            "token": user2[token],
            "channel_id": channelTest[cID],
            "message": 'Hello'
        })
        message = msg.json()
    
        #* User not an owner
        response_1 = requests.delete(f"{url}admin/user/remove/v1", json={
            "token": user2[token],
            "u_id": user1[AuID]
        })
        assert response_1.status_code == 403
    
        requests.delete(f"{url}admin/user/remove/v1", json={
            "token": user1[token],
            "u_id": user2[AuID]
        })
    
        msg_data = requests.get(f"{url}channel/messages/v2", params={
            "token": user1[token],
            "channel_id": channelTest[cID],
            "start": 0
        })
>       message_data = msg_data.json()

http_tests/admin_http_test.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7f33d0d406a0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Only members can view messages</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7f33d15ee9f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
_______________________ test_http_userpermissions_change _______________________

user1 = {'auth_user_id': 4, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQsImxvZ2luX3RpbWUiOjE2MjAwNTI3MzgsInNhbHQiOiI2MjZhYzY1Ny0zNGFlLTRjOTAtOGY2OC02NDcwNmJhNzJlMDAifQ.r1I0PSTNI4UwIMCaJfJudwzQW8eeX4vwd2PYwy4H1Q0'}
user2 = {'auth_user_id': 5, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjUsImxvZ2luX3RpbWUiOjE2MjAwNTI3MzgsInNhbHQiOiJhMDFmNDAyMy1hNDgyLTQ5N2MtOWVhZC05YzBkNzVjNWM5MTIifQ.gaaFBF9ArNXlLkTLv3wVA7URx4y_15QOo-wR4qXqdho'}
user3 = {'auth_user_id': 6, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjYsImxvZ2luX3RpbWUiOjE2MjAwNTI3MzgsInNhbHQiOiJkNGIxNzA2Ni04MDk5LTQ3YTktYTU5Ni01OWRkOGIzODZjMWIifQ.yOFChCgkwygFQfr96nv930d3WyucvNUW_huEj3qrrk0'}

    def test_http_userpermissions_change(user1, user2, user3):
    
        #* Test 1: Test if the user gets the permissions when changed by user1
    
        requests.post(f"{url}admin/userpermission/change/v1", json={
            "token": user1[token],
            "u_id": user2[AuID],
            "permission_id": 1}
        )
    
        chan = requests.post(f"{url}channels/create/v2", json={
            "token": user3[token],
            "name": "channel",
            "is_public": False}
        )
        channel = chan.json()
    
        requests.post(f"{url}channel/join/v2", json={
            "token": user2[token],
            "channel_id": channel[cID]}
        )
    
        response = requests.get(f"{url}channel/details/v2", params={
            'token': user2[token],
            'channel_id': channel[cID]}
        )
        details = response.json()
>       assert {
            fName: 'User',
            lName: '2',
            'email': "second@gmail.com",
            'handle_str': "user2",
            uID: user2[AuID],
            'profile_img_url': f"{url}static/default.jpg"
        } in details[allMems]
E       AssertionError: assert {'email': 'second@gmail.com', 'handle_str': 'user2', 'name_first': 'User', 'name_last': '2', ...} in [{'email': 'second@gmail.com', 'handle_str': 'user2', 'name_first': 'User', 'name_last': '2', ...}, {'email': 'third@gmail.com', 'handle_str': 'user3', 'name_first': 'User', 'name_last': '3', ...}]

http_tests/admin_http_test.py:156: AssertionError
______________________ test_http_admin_user_remove_valid _______________________

user1 = {'auth_user_id': 8, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjgsImxvZ2luX3RpbWUiOjE2MjAwNTI3MzgsInNhbHQiOiI0NWI2NWYxMS0zMWI1LTQ3MGQtYTRkMC02ZDYyYTJlNTYwN2MifQ.ruBSAOwYzHO_qZ5m1cVTBCkZefDzBQCDSJjSVH1zbL8'}
user2 = {'auth_user_id': 9, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjksImxvZ2luX3RpbWUiOjE2MjAwNTI3MzgsInNhbHQiOiI5YjVmZGI5ZC02MWQ2LTQ0ZDEtYWQwZS1mMWYwMjkyODNjZTMifQ.u-vesfVKY7vS9qwhVAVplGBdYQIxpoo3_SjPAvlW9uo'}

    def test_http_admin_user_remove_valid(user1, user2):
    
        chan = requests.post(f"{url}channels/create/v2", json={
            "token": user1[token],
            "name": "Channel",
            "is_public": True
        })
        channelTest = chan.json()
    
        requests.post(f"{url}channel/join/v2", json={
            "token": user2[token],
            "channel_id": channelTest[cID]
        })
    
        msg = requests.post(f"{url}message/send/v2", json={
            "token": user2[token],
            "channel_id": channelTest[cID],
            "message": 'Hello'
        })
        message = msg.json()
    
        #* User not an owner
        response_1 = requests.delete(f"{url}admin/user/remove/v1", json={
            "token": user2[token],
            "u_id": user1[AuID]
        })
        assert response_1.status_code == 403
    
        requests.delete(f"{url}admin/user/remove/v1", json={
            "token": user1[token],
            "u_id": user2[AuID]
        })
    
        msg_data = requests.get(f"{url}channel/messages/v2", params={
            "token": user1[token],
            "channel_id": channelTest[cID],
            "start": 0
        })
>       message_data = msg_data.json()

http_tests/admin_http_test.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7f33d0d406a0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Only members can view messages</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7f33d15ee9f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
_______________________ test_http_userpermissions_change _______________________

user1 = {'auth_user_id': 12, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjEyLCJsb2dpbl90aW1lIjoxNjIwMDUyNzM4LCJzYWx0IjoiMzgxYTM0YzgtM2JhZC00Y2I3LThlZWEtODYyYTE4ZTllMjYyIn0.R0-WqrFZMLyHCyxSoF0dW0N2jsUnFgkE2Kq7NOM2y3I'}
user2 = {'auth_user_id': 13, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjEzLCJsb2dpbl90aW1lIjoxNjIwMDUyNzM4LCJzYWx0IjoiYzM3ZjhjNjMtZDVkNi00MTZiLWEyNzMtNTBhZDgwMmEzY2EwIn0.iz_ULj-zIunDKKV_Fuvo4RvwNIUk2w5xT38aPa7tF7Q'}
user3 = {'auth_user_id': 14, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE0LCJsb2dpbl90aW1lIjoxNjIwMDUyNzM4LCJzYWx0IjoiOGUyZGRiYjYtNzdhMC00MTMxLTg1M2EtYmM2MjdiOTlkOGVmIn0.T38F5elNuI715kb0Nj8Frd_m2IB4uXSX2BFjrrzhjI8'}

    def test_http_userpermissions_change(user1, user2, user3):
    
        #* Test 1: Test if the user gets the permissions when changed by user1
    
        requests.post(f"{url}admin/userpermission/change/v1", json={
            "token": user1[token],
            "u_id": user2[AuID],
            "permission_id": 1}
        )
    
        chan = requests.post(f"{url}channels/create/v2", json={
            "token": user3[token],
            "name": "channel",
            "is_public": False}
        )
        channel = chan.json()
    
        requests.post(f"{url}channel/join/v2", json={
            "token": user2[token],
            "channel_id": channel[cID]}
        )
    
        response = requests.get(f"{url}channel/details/v2", params={
            'token': user2[token],
            'channel_id': channel[cID]}
        )
        details = response.json()
>       assert {
            fName: 'User',
            lName: '2',
            'email': "second@gmail.com",
            'handle_str': "user2",
            uID: user2[AuID],
            'profile_img_url': f"{url}static/default.jpg"
        } in details[allMems]
E       AssertionError: assert {'email': 'second@gmail.com', 'handle_str': 'user2', 'name_first': 'User', 'name_last': '2', ...} in [{'email': 'second@gmail.com', 'handle_str': 'user2', 'name_first': 'User', 'name_last': '2', ...}, {'email': 'third@gmail.com', 'handle_str': 'user3', 'name_first': 'User', 'name_last': '3', ...}]

http_tests/admin_http_test.py:156: AssertionError
__________________________ test_http_auth_login_valid __________________________

    def test_http_auth_login_valid():
        requests.delete(f"{url}clear/v1")
        requests.post(f"{url}auth/register/v2", json={"email": "caricoleman@gmail.com", "password": "1234567", "name_first": "cari", "name_last": "coleman"})
        r = requests.post(f"{url}auth/login/v2", json={"email": "caricoleman@gmail.com", "password": "1234567"})
        token = encode({'session_id': 1, 'user_id': 0}, SECRET, algorithm='HS256')
        payload = r.json()
>       assert payload['token'] == token
E       AssertionError: assert 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE2LCJsb2dpbl90aW1lIjoxNjIwMDUyNzM4LCJzYWx0IjoiYjk5ODRjMDItYTBiYS00NjhkLTg5ZjUtYTRjYzQzZTIxZjdmIn0.atdjIo_TefOU00pawM1PFDJaH1B4bApXhmr8BjA8M_4' == 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjoxLCJ1c2VyX2lkIjowfQ.gX9zFdDRtGh_zugBZN7DlqAfPD-0_cAT20JYyIi7_YU'
E         - eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjoxLCJ1c2VyX2lkIjowfQ.gX9zFdDRtGh_zugBZN7DlqAfPD-0_cAT20JYyIi7_YU
E         + eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE2LCJsb2dpbl90aW1lIjoxNjIwMDUyNzM4LCJzYWx0IjoiYjk5ODRjMDItYTBiYS00NjhkLTg5ZjUtYTRjYzQzZTIxZjdmIn0.atdjIo_TefOU00pawM1PFDJaH1B4bApXhmr8BjA8M_4

http_tests/auth_http_test.py:41: AssertionError
________________________ test_http_auth_register_valid _________________________

    def test_http_auth_register_valid():
        requests.delete(f"{url}clear/v1")
        r = requests.post(f"{url}auth/register/v2", json={"email": "caricoleman@gmail.com", "password": "1234567", "name_first": "cari", "name_last": "coleman"})
        token = encode({'session_id': 0, 'user_id': 0}, SECRET, algorithm='HS256')
        payload = r.json()
>       assert payload["token"] == token
E       AssertionError: assert 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE5LCJsb2dpbl90aW1lIjoxNjIwMDUyNzM4LCJzYWx0IjoiY2ZhYjg3MTYtOWYwOS00MmE1LWJhNmMtYjE5YmMzMDgxNWE0In0.DZUw_HExpGZ6mEMeMYG7EsgF2co90LYIWV1qGN5QO8w' == 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg'
E         - eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg
E         + eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE5LCJsb2dpbl90aW1lIjoxNjIwMDUyNzM4LCJzYWx0IjoiY2ZhYjg3MTYtOWYwOS00MmE1LWJhNmMtYjE5YmMzMDgxNWE0In0.DZUw_HExpGZ6mEMeMYG7EsgF2co90LYIWV1qGN5QO8w

http_tests/auth_http_test.py:72: AssertionError
_________________________ test_http_auth_logout_valid __________________________

    def test_http_auth_logout_valid():
        requests.delete(f"{url}clear/v1")
        response_1 = requests.post(f"{url}auth/register/v2", json={"email": "caricoleman@gmail.com", "password": "1234567", "name_first": "cari", "name_last": "coleman"})
        payload_1 = response_1.json()
        response_2 = requests.post(f"{url}auth/login/v2", json={"email": "caricoleman@gmail.com", "password": "1234567"})
        payload_2 = response_2.json()
    
        response_3 = requests.post(f"{url}auth/logout/v1", json={'token': payload_1['token']})
        payload_3 = response_3.json()
        assert payload_3['is_success'] == True
    
        with pytest.raises(AccessError):
>           check_session(0, 0)
E           Failed: DID NOT RAISE <class 'src.error.AccessError'>

http_tests/auth_http_test.py:131: Failed
___________________ test_http_auth_passwordreset_valid_email ___________________

user1 = {'auth_user_id': 29, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjI5LCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiZjdjN2MwMjAtZGEwZS00NzlmLWJlYzAtZWFiZDJkYTExZDI1In0.zjkWkhlh07_NB3JQQ17-vwR5j2oONttNJ0tcuNWnY8Q'}
user2 = {'auth_user_id': 30, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjMwLCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiY2NmZjMxOWEtZmIwNS00YmU2LTgzMDAtYmY0ZWRmODVlY2U0In0.qWl4ESftkJB0v6iD-K391SNIqHD0EDdxvRXBWAGEG5g'}

    def test_http_auth_passwordreset_valid_email(user1, user2):
    
>       result = requests.post(f"{url}auth/passwordreset/request/v1", json={'email': get_user(user1['auth_user_id'])['email']})

http_tests/auth_http_test.py:152: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

user_id = 29

    def get_user(user_id):
        data = data_load()
    
        for user in data['users']:
            if user_id == user[uID]:
                return {
                    uID: user[uID],
                    'email': user['email'],
                    'name_first': user['name_first'],
                    'name_last': user['name_last'],
                    'handle_str': user['handle_str'],
                    'profile_img_url': user['profile_img_url'],
                }
>       raise InputError
E       src.error.InputError: 400 Bad Request: None

src/other.py:148: InputError
___________________________ test_http_channel_invite ___________________________

user1 = {'auth_user_id': 33, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjMzLCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiNDQ1MGY2NDAtMmZkNS00MWQ2LWI0NTEtZDQyZDU5MTMwOGViIn0.kXCosdnpGog-gQAD7ciSun43bLf47cgUe4D13oZU9H8'}
user2 = {'auth_user_id': 34, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjM0LCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiZWFiYjc1NzQtOThlYy00OTUyLTkyMDYtYzgzNmNhZWMyZGQ0In0.Y-Q_E7ZRLX5XevyaAIxwfHmPYpzOdLZwkKOqYd8DTjY'}
user3 = {'auth_user_id': 35, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjM1LCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiMzE5Yzc5M2ItYmE0Ny00YjdkLWI0ZWMtOGM0OTgxYjZjMGEzIn0.zYDGlUDjjvIjMUFIkEWn0NBqu2H4jBiF4YZq3_sqhLE'}

    def test_http_channel_invite(user1, user2, user3):
    
        responseChannel = requests.post(f"{url}channels/create/v2", json={
            "token": user1[token],
            "name": 'Channel1',
            "is_public": True}
        )
        #* Test 1: Invite user2 into channel1 should be successful
        channel1 = responseChannel.json()
        requests.post(f"{url}channel/invite/v2", json={
            "token": user1[token],
            "channel_id": channel1[cID],
            "u_id": user2[AuID]}
        )
        response = requests.get(f"{url}channel/details/v2", params={
            'token': user1[token],
            'channel_id': channel1[cID]}
        )
        details = response.json()
>       assert {
            fName: 'User',
            lName: '2',
            'email': "second@gmail.com",
            'handle_str': "user2",
            uID: user2[AuID],
            'profile_img_url': f"{url}static/default.jpg"
        } in details[allMems]
E       AssertionError: assert {'email': 'second@gmail.com', 'handle_str': 'user2', 'name_first': 'User', 'name_last': '2', ...} in [{'email': 'second@gmail.com', 'handle_str': 'user2', 'name_first': 'User', 'name_last': '2', ...}, {'email': 'first@gmail.com', 'handle_str': 'user1', 'name_first': 'User', 'name_last': '1', ...}]

http_tests/channel_http_test.py:95: AssertionError
__________________________ test_http_channel_details ___________________________

user1 = {'auth_user_id': 37, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjM3LCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiZjQ2MTM2M2MtN2NhNy00ZTA3LWE2YmYtMTkyNTUzNDFiZGNkIn0.uScVTYejdGZKBA7FfuW9SIWWYVe5xPBqiOCdDEA1DdE'}
user2 = {'auth_user_id': 38, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjM4LCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiMzhmOGM5YzktMWNhNi00ZGMyLThlZTItNDM3MzY2ZTgxZDI4In0.SpAi7JPlHIqHotg3_GUmfo22DgA4MwJo0vjtBEea2WY'}

    def test_http_channel_details(user1, user2):
    
        responseChannel = requests.post(f"{url}channels/create/v2", json={
            "token": user1[token],
            "name": 'Channel1',
            "is_public": True}
        )
        channel1 = responseChannel.json()
    
        #* Test 1: expected channel details
        expected = {'name': "Channel1",
            'is_public': True,
            'owner_members':[{
                'u_id': user1[AuID],
                'name_first': "User",
                'name_last': '1',
                'email': 'first@gmail.com',
                'handle_str': 'user1',
                'profile_img_url': f"{url}static/default.jpg"
            }],
            'all_members':[{
                'u_id': user1[AuID],
                'name_first': "User",
                'name_last': '1',
                'email': 'first@gmail.com',
                'handle_str': 'user1',
                'profile_img_url': f"{url}static/default.jpg"
            }]
        }
    
        responseUser = requests.get(f"{url}channel/details/v2", params = {'token': user1[token], 'channel_id': channel1[cID]})
    
>       assert responseUser.json() == expected
E       AssertionError: assert {'all_members': [{'email': 'first@gmail.com',\n                  'handle_str': 'user1',\n                  'name_first': 'User',\n                  'name_last': '1',\n                  'profile_img_url': '',\n                  'u_id': 37}],\n 'is_public': True,\n 'name': 'Channel1',\n 'owner_members': [{'email': 'first@gmail.com',\n                    'handle_str': 'user1',\n                    'name_first': 'User',\n                    'name_last': '1',\n                    'profile_img_url': '',\n                    'u_id': 37}]} == {'all_members': [{'email': 'first@gmail.com',\n                  'handle_str': 'user1',\n                  'name_first': 'User',\n                  'name_last': '1',\n                  'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',\n                  'u_id': 37}],\n 'is_public': True,\n 'name': 'Channel1',\n 'owner_members': [{'email': 'first@gmail.com',\n                    'handle_str': 'user1',\n                    'name_first': 'User',\n                    'name_last': '1',\n                    'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',\n                    'u_id': 37}]}
E         Common items:
E         {'is_public': True, 'name': 'Channel1'}
E         Differing items:
E         {'owner_members': [{'email': 'first@gmail.com', 'handle_str': 'user1', 'name_first': 'User', 'name_last': '1', ...}]} != {'owner_members': [{'email': 'first@gmail.com', 'handle_str': 'user1', 'name_first': 'User', 'name_last': '1', ...}]}
E         {'all_members': [{'email': 'first@gmail.com', 'handle_str': 'user1', 'name_first': 'User', 'name_last': '1', ...}]} != {'all_members': [{'email': 'first@gmail.com', 'handle_str': 'user1', 'name_first': 'User', 'name_last': '1', ...}]}
E         Full diff:
E           {
E            'all_members': [{'email': 'first@gmail.com',
E                             'handle_str': 'user1',
E                             'name_first': 'User',
E                             'name_last': '1',
E         -                   'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',
E         +                   'profile_img_url': '',
E                             'u_id': 37}],
E            'is_public': True,
E            'name': 'Channel1',
E            'owner_members': [{'email': 'first@gmail.com',
E                               'handle_str': 'user1',
E                               'name_first': 'User',
E                               'name_last': '1',
E         -                     'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',
E         +                     'profile_img_url': '',
E                               'u_id': 37}],
E           }

http_tests/channel_http_test.py:163: AssertionError
___________________________ test_http_channel_leave ____________________________

user1 = {'auth_user_id': 40, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQwLCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiNjAwY2QxM2ItZWU2NC00MjY0LTkxNjQtMTdkNjNkYzlmZTQ5In0.O2ZNN--06x1ufwoJ55yqPCptcXVlNDpsM8ZyRTZ6fmM'}
user2 = {'auth_user_id': 41, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQxLCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiNGVlMDE4OGItYTg1My00MWFjLTljMmQtYTgwYTIwMmIwZjhlIn0.lL62roH8VXCL6hVCyCIxS3mW6--W6Cm4Q_VFbYhJdkE'}
user3 = {'auth_user_id': 42, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQyLCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiNmZjYmZkYjAtNmE5Yi00ODYxLThkNDMtNmVmYzJmMzcyYjVjIn0.oEWlmkjZ6ZgirAQkfLg_LPdjv47Jm_coW_9arvfzNnA'}
user4 = {'auth_user_id': 43, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQzLCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiNDU3M2U0ZjktNTZjOC00N2FmLTlkOTQtMzA1MGM5ZjliODEyIn0.Qi6ftIQ8X8K8bz9zeny0QWxXuUsaq-ec1Ww-vPjL5eY'}

    def test_http_channel_leave(user1, user2, user3, user4):
        #* Public channel is created by user1
        c1 = requests.post(f"{url}channels/create/v2", json={
            "token": user1[token],
            "name": "TrumpPence",
            "is_public": True
        })
        #* Users 2, 3 and 4 join this channel
        requests.post(f"{url}channel/join/v2", json={
            "token": user2[token],
            "channel_id": c1.json()['channel_id']
        })
        requests.post(f"{url}channel/join/v2", json={
            "token": user3[token],
            "channel_id": c1.json()['channel_id']
        })
        requests.post(f"{url}channel/join/v2", json={
            "token": user4[token],
            "channel_id": c1.json()['channel_id']
        })
        #* Make sure they joined
>       assert {
            uID: user2[AuID],
            fName: 'User',
            lName: "2",
            'email': "second@gmail.com",
            'handle_str': "user2",
            'profile_img_url': f"{url}static/default.jpg"
        } in requests.get(f"{url}channel/details/v2", params={
            'token': user3[token],
            'channel_id': c1.json()['channel_id']
        }).json()[allMems]
E       AssertionError: assert {'email': 'second@gmail.com', 'handle_str': 'user2', 'name_first': 'User', 'name_last': '2', ...} in [{'email': 'third@gmail.com', 'handle_str': 'user3', 'name_first': 'User', 'name_last': '3', ...}, {'email': 'fourth@g...me_last': '1', ...}, {'email': 'second@gmail.com', 'handle_str': 'user2', 'name_first': 'User', 'name_last': '2', ...}]

http_tests/channel_http_test.py:197: AssertionError
____________________________ test_http_channel_join ____________________________

user1 = {'auth_user_id': 45, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQ1LCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiYTZmYzU2MGUtZTQ3Zi00YjQ4LTkyMjItMjYxMTE1YjJhMDg3In0.YF-0nLdeRVwUsQSxGZkIiCTF3PJnzBalbIZCyY1pJB4'}
user2 = {'auth_user_id': 46, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQ2LCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiZTFmZGY3ZTYtYmExYy00MmE1LTgzNTYtMjNhYmZhZWQxMjRjIn0.pJ7ooWR_g0PnzzXdr44Hw7sGgJw1FnpCGMJEhFv_WmQ'}
user3 = {'auth_user_id': 47, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQ3LCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiNGJjNGY0YTAtMjIyNC00NzQ1LTk0NDAtODNlMzRkYWEyNzMyIn0.0cBooBJaKtl_jO2vstAzRPahvBO8RL256Heyi_D4KA4'}
user4 = {'auth_user_id': 48, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQ4LCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiMTc3NjkxM2ItNjQyNy00MTU5LThhNTAtMTMwZTZjOWE2NjY3In0.6DNOOX_mgKE1rOt_BZlrGrssgYgnpCZTVSxpKpLiM1w'}

    def test_http_channel_join(user1, user2, user3, user4):
        #* This test is structured identically to test_channel_join in tests/channel_test.py
        c1 = requests.post(f"{url}channels/create/v2", json={
            "token": user1[token],
            "name": "TrumpPence",
            "is_public": True
        })
        c2 = requests.post(f"{url}channels/create/v2", json={
            "token": user2[token],
            "name": "BidenHarris",
            "is_public": False
        })
        requests.post(f"{url}channel/join/v2", json={
            "token": user3[token],
            "channel_id": c1.json()['channel_id']
        })
>       assert requests.get(f"{url}channel/details/v2", params={
            'token': user3[token],
            'channel_id': c1.json()['channel_id']
        }).json() == {
            "name": "TrumpPence",
            "is_public": True,
            "owner_members": [
                {
                    uID: user1[AuID],
                    'email': "first@gmail.com",
                    fName: "User",
                    lName: "1",
                    'handle_str': "user1",
                    'profile_img_url': f"{url}static/default.jpg"
                }
            ],
            "all_members": [
                {
                    uID: user1[AuID],
                    'email': "first@gmail.com",
                    fName: "User",
                    lName: "1",
                    'handle_str': "user1",
                    'profile_img_url': f"{url}static/default.jpg"
                },
                {
                    uID: user3[AuID],
                    'email': "third@gmail.com",
                    fName: "User",
                    lName: "3",
                    'handle_str': "user3",
                    'profile_img_url': f"{url}static/default.jpg"
                }
            ]
        }
E       AssertionError: assert {'all_members': [{'email': 'first@gmail.com',\n                  'handle_str': 'user1',\n                  'name_first': 'User',\n                  'name_last': '1',\n                  'profile_img_url': '',\n                  'u_id': 45},\n                 {'email': 'third@gmail.com',\n                  'handle_str': 'user3',\n                  'name_first': 'User',\n                  'name_last': '3',\n                  'profile_img_url': '',\n                  'u_id': 47}],\n 'is_public': True,\n 'name': 'TrumpPence',\n 'owner_members': [{'email': 'first@gmail.com',\n                    'handle_str': 'user1',\n                    'name_first': 'User',\n                    'name_last': '1',\n                    'profile_img_url': '',\n                    'u_id': 45}]} == {'all_members': [{'email': 'first@gmail.com',\n                  'handle_str': 'user1',\n                  'name_first': 'User',\n                  'name_last': '1',\n                  'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',\n                  'u_id': 45},\n                 {'email': 'third@gmail.com',\n                  'handle_str': 'user3',\n                  'name_first': 'User',\n                  'name_last': '3',\n                  'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',\n                  'u_id': 47}],\n 'is_public': True,\n 'name': 'TrumpPence',\n 'owner_members': [{'email': 'first@gmail.com',\n                    'handle_str': 'user1',\n                    'name_first': 'User',\n                    'name_last': '1',\n                    'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',\n                    'u_id': 45}]}
E         Common items:
E         {'is_public': True, 'name': 'TrumpPence'}
E         Differing items:
E         {'owner_members': [{'email': 'first@gmail.com', 'handle_str': 'user1', 'name_first': 'User', 'name_last': '1', ...}]} != {'owner_members': [{'email': 'first@gmail.com', 'handle_str': 'user1', 'name_first': 'User', 'name_last': '1', ...}]}
E         {'all_members': [{'email': 'first@gmail.com', 'handle_str': 'user1', 'name_first': 'User', 'name_last': '1', ...}, {'email': 'third@gmail.com', 'handle_str': 'user3', 'name_first': 'User', 'name_last': '3', ...}]} != {'all_members': [{'email': 'first@gmail.com', 'handle_str': 'user1', 'name_first': 'User', 'name_last': '1', ...}, {'email': 'third@gmail.com', 'handle_str': 'user3', 'name_first': 'User', 'name_last': '3', ...}]}
E         Full diff:
E           {
E            'all_members': [{'email': 'first@gmail.com',
E                             'handle_str': 'user1',
E                             'name_first': 'User',
E                             'name_last': '1',
E         -                   'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',
E         +                   'profile_img_url': '',
E                             'u_id': 45},
E                            {'email': 'third@gmail.com',
E                             'handle_str': 'user3',
E                             'name_first': 'User',
E                             'name_last': '3',
E         -                   'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',
E         +                   'profile_img_url': '',
E                             'u_id': 47}],
E            'is_public': True,
E            'name': 'TrumpPence',
E            'owner_members': [{'email': 'first@gmail.com',
E                               'handle_str': 'user1',
E                               'name_first': 'User',
E                               'name_last': '1',
E         -                     'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',
E         +                     'profile_img_url': '',
E                               'u_id': 45}],
E           }

http_tests/channel_http_test.py:290: AssertionError
__________________________ test_http_channel_addowner __________________________

user1 = {'auth_user_id': 51, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjUxLCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiYmE3YmY2NjYtNGY2Yy00Y2Y3LWFiMDItYzZiZDQ5MGE3YTgwIn0.XakC0j6A-9wbw9iuf0ASbvS9_x8ZJIA1L6TBPUmQgrM'}
user2 = {'auth_user_id': 52, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjUyLCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiNDdhNjRhOGMtZjU0Yi00ZWViLTg4ZTctMWMyNzEzMzM4ZTVmIn0.7T8BoVSCJT1nKG58Wbwo9YuQdafpxNPst65MGfVcJNc'}
user3 = {'auth_user_id': 53, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjUzLCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiYTU4NjM5NGEtNzBmNS00ZTFkLTkwMDItOTNjNWMwYTlmNDU0In0.9fktNao8itSCV_BujFh3wvf1ufR10erU6SQWYtdhVFA'}
user4 = {'auth_user_id': 54, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU0LCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiMmY4ZGI3YTktNTY1MC00NmNlLWFlZWYtNmJlYjg4ZTQ0MDVmIn0.BOflXFYE397lQHaHTyIFMm5ue2MXmkgjmg1qPraF-U8'}

    def test_http_channel_addowner(user1, user2, user3, user4):
    
        responseChannel = requests.post(f"{url}channels/create/v2", json={
            "token": user1[token],
            "name": 'Channel1',
            "is_public": True}
        )
        channel1 = responseChannel.json()
    
        #* Test 1: Succesfully add owner
    
        requests.post(f"{url}channel/addowner/v1", json={
            "token": user1[token],
            "channel_id": channel1[cID],
            "u_id": user2[AuID]}
        )
    
        response = requests.get(f"{url}channel/details/v2", params={
            'token': user1[token],
            'channel_id': channel1[cID]}
        )
        details = response.json()
    
>       assert {
            uID: user2[AuID],
            fName: 'User',
            lName: '2',
            'email': 'second@gmail.com',
            'handle_str': 'user2',
            'profile_img_url': f"{url}static/default.jpg"
        } in details[allMems]
E       AssertionError: assert {'email': 'second@gmail.com', 'handle_str': 'user2', 'name_first': 'User', 'name_last': '2', ...} in [{'email': 'second@gmail.com', 'handle_str': 'user2', 'name_first': 'User', 'name_last': '2', ...}, {'email': 'first@gmail.com', 'handle_str': 'user1', 'name_first': 'User', 'name_last': '1', ...}]

http_tests/channel_http_test.py:365: AssertionError
________________________ test_http_channel_removeowner _________________________

user1 = {'auth_user_id': 56, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU2LCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiYTBmZTM0OWQtMGU5Zi00MGY4LTg2YzctODlkYjJhNTk0ZTEyIn0.JmgzOujVio14nmv2GyK4a_t8g9qrm1oFFZ_y9sycYX4'}
user2 = {'auth_user_id': 57, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU3LCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiMjdkNjYzZDMtNDRiNC00MDVmLTgxMzQtYzMzZDkwM2UxMTJjIn0.uy-IIvEqnqGe4YkLfpC4foXHcWmzF6VmsLOM2ijTgbU'}
user3 = {'auth_user_id': 58, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU4LCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiMDgyMGZiZWMtYzk1Yy00M2JmLTg5M2UtNThkOGM0NThhZjFiIn0.MHwpWYdTWwRJr6Hg5EfNfkHlmrUdEHVuisvz4MG2Fgc'}
user4 = {'auth_user_id': 59, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU5LCJsb2dpbl90aW1lIjoxNjIwMDUyNzM5LCJzYWx0IjoiZmQyMTEzODUtMjc5NS00OTYwLWJjY2MtMWJjMjM2OWE3NWUwIn0.2pm3r5_6iurtiIteVMzraMP2ilkJ2cLID5blsetW42k'}

    def test_http_channel_removeowner(user1, user2, user3, user4):
    
        responseChannel = requests.post(f"{url}channels/create/v2", json={
            "token": user1[token],
            "name": 'Channel1',
            "is_public": True}
        )
        channel1 = responseChannel.json()
        #* Test 1 : see if successfully removed member from owner not all members
        requests.post(f"{url}channel/addowner/v1", json={
            "token": user1[token],
            "channel_id": channel1[cID],
            "u_id": user2[AuID]}
        )
    
        requests.post(f"{url}channel/removeowner/v1", json={
            "token": user2[token],
            "channel_id": channel1[cID],
            "u_id": user1[AuID]}
        )
    
        response = requests.get(f"{url}channel/details/v2", params={
            'token': user2[token],
            'channel_id': channel1[cID]}
        )
        details = response.json()
    
        assert {
            uID: user1[AuID],
            fName: 'User',
            lName: '1',
            'email': 'first@gmail.com',
            'handle_str': 'user1',
            'profile_img_url': f"{url}static/default.jpg"
        } not in details[ownMems]
>       assert {
            uID: user1[AuID],
            fName: 'User',
            lName: '1',
            'email': 'first@gmail.com',
            'handle_str': 'user1',
            'profile_img_url': f"{url}static/default.jpg"
        } in details[allMems]
E       AssertionError: assert {'email': 'first@gmail.com', 'handle_str': 'user1', 'name_first': 'User', 'name_last': '1', ...} in [{'email': 'second@gmail.com', 'handle_str': 'user2', 'name_first': 'User', 'name_last': '2', ...}, {'email': 'first@gmail.com', 'handle_str': 'user1', 'name_first': 'User', 'name_last': '1', ...}]

http_tests/channel_http_test.py:446: AssertionError
__________________________ test_http_dm_details_valid __________________________

user1 = {'auth_user_id': 183, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE4MywibG9naW5fdGltZSI6MTYyMDA1Mjc0MCwic2FsdCI6ImVlZDIxYmZjLTU0ZGItNGU2YS1iYzQ2LTA3YTBlNjU3Njg0MyJ9.auXX-hfahrHf3o3Bw2jsxcvfNjTO2_lakrR9kZnE-8s'}
user2 = {'auth_user_id': 184, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE4NCwibG9naW5fdGltZSI6MTYyMDA1Mjc0MCwic2FsdCI6ImFkODJkOTQ2LWUwM2MtNDhiZS1iZDA0LWIyNGRiNDY3N2U1MSJ9.UNcYyQyMsjc8NGR6a0rj1dahrJ_fAB1wPClUdf5GqME'}

    def test_http_dm_details_valid(user1, user2):
        dmResponse = requests.post(f"{url}dm/create/v1", json={
            "token": user1[token],
            "u_ids": [user2[AuID]]
        })
        dm1 = dmResponse.json()
        expected = {
            Name: 'user1, user2',
            'members': [{
                uID: user1[AuID],
                fName: "User",
                lName: '1',
                'email': 'first@gmail.com',
                handle: 'user1',
                'profile_img_url': f"{url}static/default.jpg"
            }, {
                uID: user2[AuID],
                fName: "User",
                lName: '2',
                'email': 'second@gmail.com',
                handle: 'user2',
                'profile_img_url': f"{url}static/default.jpg"
            }
            ]
        }
        responseUser1 = requests.get(f"{url}dm/details/v1", params = {'token': user1[token], 'dm_id': dm1[dmID]})
        responseUser2 = requests.get(f"{url}dm/details/v1", params = {'token': user2[token], 'dm_id': dm1[dmID]})
    
>       assert responseUser1.json() == expected
E       AssertionError: assert {'members': [{'email': 'second@gmail.com',\n              'handle_str': 'user2',\n              'name_first': 'User',\n              'name_last': '2',\n              'profile_img_url': '',\n              'u_id': 184},\n             {'email': 'first@gmail.com',\n              'handle_str': 'user1',\n              'name_first': 'User',\n              'name_last': '1',\n              'profile_img_url': '',\n              'u_id': 183}],\n 'name': 'user1, user2'} == {'members': [{'email': 'first@gmail.com',\n              'handle_str': 'user1',\n              'name_first': 'User',\n              'name_last': '1',\n              'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',\n              'u_id': 183},\n             {'email': 'second@gmail.com',\n              'handle_str': 'user2',\n              'name_first': 'User',\n              'name_last': '2',\n              'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',\n              'u_id': 184}],\n 'name': 'user1, user2'}
E         Common items:
E         {'name': 'user1, user2'}
E         Differing items:
E         {'members': [{'email': 'second@gmail.com', 'handle_str': 'user2', 'name_first': 'User', 'name_last': '2', ...}, {'email': 'first@gmail.com', 'handle_str': 'user1', 'name_first': 'User', 'name_last': '1', ...}]} != {'members': [{'email': 'first@gmail.com', 'handle_str': 'user1', 'name_first': 'User', 'name_last': '1', ...}, {'email': 'second@gmail.com', 'handle_str': 'user2', 'name_first': 'User', 'name_last': '2', ...}]}
E         Full diff:
E           {
E         -  'members': [{'email': 'first@gmail.com',
E         ?                         --- ^
E         +  'members': [{'email': 'second@gmail.com',
E         ?                          ^^^^^
E         +               'handle_str': 'user2',
E         +               'name_first': 'User',
E         +               'name_last': '2',
E         +               'profile_img_url': '',
E         +               'u_id': 184},
E         +              {'email': 'first@gmail.com',
E                         'handle_str': 'user1',
E                         'name_first': 'User',
E                         'name_last': '1',
E         -               'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',
E         +               'profile_img_url': '',
E         -               'u_id': 183},
E         +               'u_id': 183}],
E         ?                           +
E         -              {'email': 'second@gmail.com',
E         -               'handle_str': 'user2',
E         -               'name_first': 'User',
E         -               'name_last': '2',
E         -               'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',
E         -               'u_id': 184}],
E            'name': 'user1, user2',
E           }

http_tests/dm_http_test.py:99: AssertionError
_______________________ test_http_dm_invite_access_error _______________________

user1 = {'auth_user_id': 214, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjIxNCwibG9naW5fdGltZSI6MTYyMDA1Mjc0MCwic2FsdCI6ImI2ZGVkOWE2LThhZGUtNDIxYi1hZDhhLWE2MDE0ZjM0ZjA0YyJ9.HuwxjcIBSE6Ad7IqQ8zv4VrLNIwm4IblAhRwvcd-JSg'}
user2 = {'auth_user_id': 215, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjIxNSwibG9naW5fdGltZSI6MTYyMDA1Mjc0MCwic2FsdCI6ImVjNThmM2YzLTg1NGItNDMxOC1hOTRkLTVlNTRiMWNlZGU0NiJ9.AYeHj73zY18CClJwoB2ihgHLT2-nhEWOzV8ECIq2y5E'}
user3 = {'auth_user_id': 216, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjIxNiwibG9naW5fdGltZSI6MTYyMDA1Mjc0MCwic2FsdCI6IjUyNTdiYzViLWE5ZGYtNDkwMy1hYWQ5LTFkODNkNGE3NmExNyJ9.d_WOZriKMUm_AG69RQY-Y6aG9jvDitKqBhHSqwW3yhk'}

    def test_http_dm_invite_access_error(user1, user2, user3):
        #Create dm with dm_id 0 containing user1 and user2
        response = requests.post(f"{url}dm/create/v1", json={
            "token": user1[token],
            "u_ids": [user2[AuID]]
        })
        dm_0 = response.json()
    
        access_error = requests.post(f"{url}dm/invite/v1", json={
            "token": user3[token],
            dmID: dm_0[dmID],
            uID: user2[AuID],
        })
>       assert access_error.status_code == 403
E       assert 400 == 403
E         +400
E         -403

http_tests/dm_http_test.py:253: AssertionError
____________________________ test_http_dm_messages _____________________________

user1 = {'auth_user_id': 235, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjIzNSwibG9naW5fdGltZSI6MTYyMDA1Mjc0MCwic2FsdCI6ImQyZjFjZjI4LTA5MmMtNGNmNi1iOTIxLWIxZDI2MjFjMzNjMyJ9.8QZg0SOd3pt7jOgUFLsq8CIZDjbKdqF02Yf0YFPYDJQ'}
user2 = {'auth_user_id': 236, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjIzNiwibG9naW5fdGltZSI6MTYyMDA1Mjc0MCwic2FsdCI6ImUwNWM0NjY2LWUwOWMtNDllNC05M2E1LTU4Y2IwNTc0YjQ0ZiJ9.yirWDGD1A4zukfYiCcqBRP5y18psGsD0Fn0yMKVpRn0'}
user3 = {'auth_user_id': 237, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjIzNywibG9naW5fdGltZSI6MTYyMDA1Mjc0MCwic2FsdCI6ImY5MGRlNWFjLTM0YmYtNDc4OC1iNjk5LWYxMGZmY2NmYjAxNiJ9.HEa4NV7WPUrk1SEBc8SpLbE7e7NiJcCtDTdTB3MQC3k'}

    def test_http_dm_messages(user1, user2, user3):
        # Create first dm for first test case
        # Success case 1: Less than 50 messages returns end as -1
        dm1 = requests.post(f"{url}dm/create/v1", json={
            "token": user1[token],
            "u_ids": [user2[AuID]],
        }).json()
        requests.post(f"{url}message/senddm/v1", json={
            "token": user1[token],
            dmID: dm1[dmID],
            "message" : "First message :)",
        })
        result1 = requests.get(f"{url}dm/messages/v1", params = {
            "token": user1[token],
            dmID: dm1[dmID],
            'start': 0
        }).json()
    
        assert len(result1['messages']) == 1
        assert result1['start'] == 0
        assert result1['end'] == -1
    
        # Create second dm for second test case
        # Success case 2: 50 messages returns end as -1 (no more messages to load)
        dm2 = requests.post(f"{url}dm/create/v1", json={
            "token": user1[token],
            "u_ids": [user2[AuID]],
        }).json()
    
        message_counter = 1
        for _ in range(50):
            requests.post(f"{url}message/senddm/v1", json = {
                "token": user1[token],
                dmID: dm2[dmID],
                "message" : f"{message_counter}",
            })
            message_counter += 1
    
        result2 = requests.get(f"{url}dm/messages/v1", params = {
            "token": user1[token],
            dmID: dm2[dmID],
            'start': 0
        }).json()
    
        assert len(result2['messages']) == 50
        assert result2['start'] == 0
>       assert result2['end'] == -1
E       assert 50 == -1
E         +50
E         --1

http_tests/dm_http_test.py:404: AssertionError
__________________________________ test_echo ___________________________________

    def test_echo():
        '''
        A simple test to check echo
        '''
        resp = requests.get(config.url + 'echo', params={'data': 'hello'})
>       assert json.loads(resp.text) == {'data': 'hello'}

http_tests/echo_http_test.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.7/json/__init__.py:348: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.7/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7f33d1780400>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.7/json/decoder.py:355: JSONDecodeError
_________________________ test_http_message_sendlater __________________________

user1 = {'auth_user_id': 451, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQ1MSwibG9naW5fdGltZSI6MTYyMDA1Mjc0MSwic2FsdCI6IjNmMTZkMThmLTUyN2UtNGNhNS04ZWZkLTI3ZDA5YTcwZWExOSJ9.RESlj4kTcXmfMU070h61IXKIY_KibHt8WQCEEy0AAfc'}
user2 = {'auth_user_id': 452, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQ1MiwibG9naW5fdGltZSI6MTYyMDA1Mjc0MSwic2FsdCI6IjA4Nzg0NGQ0LWUxMDAtNGQxMC1hYjg2LWRhMDZiNWNiODZkZCJ9.jFatZrh8EQ-MqDNiENgemQbi5f0T2gKSaW1VCrHXrCQ'}

    def test_http_message_sendlater(user1, user2):
        c1 = requests.post(f"{url}channels/create/v2", json={
            "token": user1[token],
            "name": "TrumpPence",
            "is_public": True
        })
        requests.post(f"{url}channel/join/v2", json={
            "token": user2[token],
            "channel_id": c1.json()['channel_id']
        })
        sendTime = datetime.now().replace(tzinfo=timezone.utc).timestamp() + 3
        m1 = requests.post(f"{url}message/sendlater/v1", json={
            "token": user1[token],
            "channel_id": c1.json()['channel_id'],
            "message": "You know what matters more than American Muscle?",
            "time_sent": sendTime
        })
        messageFound = False
        for message in requests.get(f"{url}channel/messages/v2", params={
            "token": user2[token],
            "channel_id": c1.json()[cID],
            "start": 0
        }).json()['messages']:
            if m1.json()['message_id'] == message['message_id']:
                messageFound = True
        assert not messageFound
    
        #* Sleep for now
        time.sleep(4)
    
        for message in requests.get(f"{url}channel/messages/v2", params={
            "token": user2[token],
            "channel_id": c1.json()[cID],
            "start": 0
        }).json()['messages']:
            if m1.json()['message_id'] == message['message_id']:
                mTime = message['time_created']
                messageFound = True
>       assert messageFound
E       assert False

http_tests/message_http_test.py:1517: AssertionError
________________________ test_http_message_sendlaterdm _________________________

user1 = {'auth_user_id': 455, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQ1NSwibG9naW5fdGltZSI6MTYyMDA1Mjc0NSwic2FsdCI6ImE0OTE4MjlmLWI4NGUtNDA1NC1iMjlkLTUyODdmMzE4ZjFhOSJ9.MSR0tIS32WGeaQeZTgy4NdcfNXZ7lov2pmGMDwx9zQY'}
user2 = {'auth_user_id': 456, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjQ1NiwibG9naW5fdGltZSI6MTYyMDA1Mjc0NSwic2FsdCI6ImM5MDFjZWY0LWQxMmYtNGY2OC1iMzM3LTgxNGFlMDZlNDA1OSJ9.t2P5LODfrxBPRnFEsoGttq0mez3NVzZYCnUKva2ObFY'}

    def test_http_message_sendlaterdm(user1, user2):
        d1 = requests.post(f"{url}dm/create/v1", json={
            "token": user1[token],
            "u_ids": [user2[AuID]]
        })
        sendTime = datetime.now().replace(tzinfo=timezone.utc).timestamp() + 3
        m1 = requests.post(f"{url}message/sendlaterdm/v1", json={
            "token": user1[token],
            "dm_id": d1.json()[dmID],
            "message": "You know what matters more than American Muscle?",
            "time_sent": sendTime
        })
        messageFound = False
        for message in requests.get(f"{url}dm/messages/v1", params={
            "token": user2[token],
            "dm_id": d1.json()[dmID],
            "start": 0
        }).json()['messages']:
            if m1.json()['message_id'] == message['message_id']:
                messageFound = True
        assert not messageFound
    
        #* Sleep for now
        time.sleep(4)
    
        for message in requests.get(f"{url}dm/messages/v1", params={
            "token": user2[token],
            "dm_id": d1.json()[dmID],
            "start": 0
        }).json()['messages']:
            if m1.json()['message_id'] == message['message_id']:
                mTime = message['time_created']
                messageFound = True
>       assert messageFound
E       assert False

http_tests/message_http_test.py:1555: AssertionError
__________________________ test_http_search_channels ___________________________

user1 = {'auth_user_id': 544, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU0NCwibG9naW5fdGltZSI6MTYyMDA1Mjc1MCwic2FsdCI6IjEzMTM5MWI3LTk2ZWMtNDg2Ni05NGI4LTJjODk4NTZkYjMxMSJ9.XmyOxM6jZa_Zcfl9Z9NN52UZKM23ZYaesUpD7e0buXg'}
user2 = {'auth_user_id': 545, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU0NSwibG9naW5fdGltZSI6MTYyMDA1Mjc1MCwic2FsdCI6ImMyZTYwYmY1LTU2ZDktNDJmZi1iNGVlLTEwNWViNmY4YWMwNSJ9.IdIBn9s5RliUzf_0TW1HaLeY7ADKKtkLhG494fVEpL4'}
user3 = {'auth_user_id': 546, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU0NiwibG9naW5fdGltZSI6MTYyMDA1Mjc1MCwic2FsdCI6ImZlY2Y2YjExLWYyNDQtNDNhZS1hZTM5LWRmNTEyMjc5NjgxNiJ9._-VJNNC6YL_8EpeScScSiEW8xaVH00AAt0GXm7KTwog'}
user4 = {'auth_user_id': 547, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU0NywibG9naW5fdGltZSI6MTYyMDA1Mjc1MCwic2FsdCI6IjQyM2M0ZGQxLTM2NDEtNGY5NC1iMDJiLTRlYWJjNTY4ZmQ0MyJ9.RmzZOHAqdT-HS0k0jl_27UQJAmYZWYrHRi49waD1y_0'}
user5 = {'auth_user_id': 548, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU0OCwibG9naW5fdGltZSI6MTYyMDA1Mjc1MCwic2FsdCI6IjRmYmQyYzU2LTllNTUtNDFmZi1hNGRmLWM5MWIyMDU1OTEwZSJ9.9k8J2QgBZR8bOO4uHcnajQbQxJhky6f2_jn0cGG0hF8'}
channel1 = {'channel_id': 549}, channel2 = {'channel_id': 550}

    def test_http_search_channels(user1, user2, user3, user4, user5, channel1, channel2):
        #* This test is structured identically to test_search_channels in tests/other_test.py
        assert requests.get(f"{url}search/v2", params={
            "token": user5[token],
            "query_str": "om"
        }).json()['messages'] == []
        requests.post(f"{url}channel/join/v2", json={
            "token": user3[token],
            "channel_id": channel1['channel_id']
        })
        requests.post(f"{url}channel/invite/v2", json={
            "token": user2[token],
            "channel_id": channel2[cID],
            "u_id": user4[AuID]
        })
        requests.post(f"{url}channel/invite/v2", json={
            "token": user1[token],
            "channel_id": channel1[cID],
            "u_id": user5[AuID]
        })
        requests.post(f"{url}channel/invite/v2", json={
            "token": user2[token],
            "channel_id": channel2[cID],
            "u_id": user5[AuID]
        })
        requests.post(f"{url}message/send/v2", json={
            "token": user1[token],
            "channel_id": channel1['channel_id'],
            "message": "Welcome"
        }).json()
        requests.post(f"{url}message/send/v2", json={
            "token": user2[token],
            "channel_id": channel2['channel_id'],
            "message": "Akeome"
        }).json()
        requests.post(f"{url}message/send/v2", json={
            "token": user3[token],
            "channel_id": channel1['channel_id'],
            "message": "omg"
        }).json()
        requests.post(f"{url}message/send/v2", json={
            "token": user4[token],
            "channel_id": channel2['channel_id'],
            "message": "Nomnom"
        }).json()
        requests.post(f"{url}message/send/v2", json={
            "token": user3[token],
            "channel_id": channel1['channel_id'],
            "message": "Bruh haha"
        }).json()
        messageFound = False
        for messages in requests.get(f"{url}search/v2", params={
            "token": user5[token],
            "query_str": "om"
        }).json()['messages']:
            if messages['message'] == "Welcome":
                messageFound = True
        assert messageFound
        messageFound = False
        for messages in requests.get(f"{url}search/v2", params={
            "token": user5[token],
            "query_str": "om"
        }).json()['messages']:
            print(messages)
            if messages['message'] == "Akeome":
                messageFound = True
        assert messageFound
        messageFound = False
        for messages in requests.get(f"{url}search/v2", params={
            "token": user5[token],
            "query_str": "om"
        }).json()['messages']:
            if messages['message'] == "omg":
                messageFound = True
        assert messageFound
        messageFound = False
        for messages in requests.get(f"{url}search/v2", params={
            "token": user5[token],
            "query_str": "om"
        }).json()['messages']:
            if messages['message'] == "Nomnom":
                messageFound = True
        assert messageFound
    
        messageFound = False
        for messages in requests.get(f"{url}search/v2", params={
            "token": user5[token],
            "query_str": "om"
        }).json()['messages']:
            if messages['message'] == "Bruh haha":
                messageFound = True
        assert not messageFound
    
        tooLongMessage = ""
        for _ in range(1002):
            tooLongMessage += "@"
        requests.get(f"{url}search/v2", params={
            "token": user5[token],
            "query_str": tooLongMessage
        }).status_code == 400
    
        messageFound = False
        for messages in requests.get(f"{url}search/v2", params={
            "token": user2[token],
            "query_str": "om"
        }).json()['messages']:
            if messages['message'] == "omg":
                messageFound = True
        assert not messageFound
    
        requests.post(f"{url}message/send/v2", json={
            "token": user4[token],
            "channel_id": channel2['channel_id'],
            "message": "Joe Biden"
        }).json()
        messageFound = False
        for messages in requests.get(f"{url}search/v2", params={
            "token": user5[token],
            "query_str": "jOE bIDEN"
        }).json()['messages']:
            if messages['message'] == "Joe Biden":
                messageFound = True
>       assert messageFound
E       assert False

http_tests/other_http_test.py:235: AssertionError
----------------------------- Captured stdout call -----------------------------
{'is_pinned': False, 'message': 'Welcome', 'message_id': 551, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], 'time_created': 1620052750, 'u_id': 544}
{'is_pinned': False, 'message': 'Akeome', 'message_id': 552, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], 'time_created': 1620052750, 'u_id': 545}
{'is_pinned': False, 'message': 'omg', 'message_id': 553, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], 'time_created': 1620052750, 'u_id': 546}
{'is_pinned': False, 'message': 'Nomnom', 'message_id': 554, 'reacts': [{'is_this_user_reacted': False, 'react_id': 1, 'u_ids': []}], 'time_created': 1620052750, 'u_id': 547}
_____________________________ test_http_search_dms _____________________________

user1 = {'auth_user_id': 557, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU1NywibG9naW5fdGltZSI6MTYyMDA1Mjc1MCwic2FsdCI6IjFkNjQ2MTUyLTEwZTYtNDkzMi1hYmQyLWE5MGNhMzNkZjg3ZSJ9.BbFoTuXYiXRDnsFFGS5107lrKNkaVxd-TcE3mkVbJrQ'}
user2 = {'auth_user_id': 558, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU1OCwibG9naW5fdGltZSI6MTYyMDA1Mjc1MCwic2FsdCI6ImUxZGM5YmY5LWFiYmYtNDg5MS1hZTY5LWJmOThiZmEyMWQ3YiJ9.0_qo-pSGxakeAgVmr0b6GERQNaRdV0Y-RQtvSRIv7pA'}
user3 = {'auth_user_id': 559, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU1OSwibG9naW5fdGltZSI6MTYyMDA1Mjc1MCwic2FsdCI6IjlhYjI3N2Q4LTMxYzYtNDQwNC1hZGU5LWQzYTY4NzFmYTNiYyJ9.jIJiWh1OWUakPUbem_vCvFNmylBzE1Z5g0lByVbLPs0'}
dm1 = {'dm_id': 560, 'dm_name': 'user1, user2'}

    def test_http_search_dms(user1, user2, user3, dm1):
        #* This test is structured identically to test_search_dms in tests/other_test.py
        requests.post(f"{url}message/senddm/v1", json={
            "token": user1[token],
            "dm_id": dm1[dmID],
            "message": "Biden Harris 2020"
        })
        messageFound = False
        for messages in requests.get(f"{url}search/v2", params={
            "token": user2[token],
            "query_str": "bIDEN h"
        }).json()['messages']:
            if messages['message'] == "Biden Harris 2020":
                messageFound = True
>       assert messageFound
E       assert False

http_tests/other_http_test.py:251: AssertionError
____________________ test_http_standup_start_v1_invalid_cID ____________________

user1 = {'auth_user_id': 0, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg'}

    def test_http_standup_start_v1_invalid_cID(user1):
        invalid_cID = -1
        response = requests.post(f"{url}standup/start/v1", json={
            token: user1[token],
            cID: invalid_cID,
            'length': 1
        })
>       assert response.status_code == 400
E       assert 403 == 400
E         +403
E         -400

http_tests/standup_http_test.py:48: AssertionError
__________________ test_http_standup_start_v1_active_standup ___________________

user1 = {'auth_user_id': 0, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg'}

    def test_http_standup_start_v1_active_standup(user1):
        response = requests.post(f"{url}channels/create/v2", json={
            "token": user1[token],
            "name": "Channel1",
            "is_public": True
        })
>       channel = response.json()

http_tests/standup_http_test.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7f33d0d406a0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7f33d15ee9f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
____________________ test_http_standup_start_v1_user_not_in ____________________

user1 = {'auth_user_id': 0, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg'}
user2 = {'auth_user_id': 1, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo'}

    def test_http_standup_start_v1_user_not_in(user1, user2):
        response = requests.post(f"{url}channels/create/v2", json={
            "token": user1[token],
            "name": "Channel1",
            "is_public": False
        })
>       channel = response.json()

http_tests/standup_http_test.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7f33d0d406a0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7f33d15ee9f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
__________________________ test_http_standup_start_v1 __________________________

user1 = {'auth_user_id': 0, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg'}

    def test_http_standup_start_v1(user1):
        response = requests.post(f"{url}channels/create/v2", json={
            token: user1[token],
            "name": "Channel1",
            "is_public": False
        })
>       channel = response.json()

http_tests/standup_http_test.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7f33d0d406a0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7f33d15ee9f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
___________________ test_http_standup_active_v1_invalid_cID ____________________

user1 = {'auth_user_id': 0, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg'}

    def test_http_standup_active_v1_invalid_cID(user1):
        invalid_cID = -1
        response = requests.get(f"{url}standup/active/v1", params={
            token: user1[token],
            cID: invalid_cID,
            "length": standard_length
        })
>       assert response.status_code == 400
E       assert 403 == 400
E         +403
E         -400

http_tests/standup_http_test.py:119: AssertionError
_________________________ test_http_standup_active_v1 __________________________

user1 = {'auth_user_id': 0, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg'}

    def test_http_standup_active_v1(user1):
        response = requests.post(f"{url}channels/create/v2", json={
            token: user1[token],
            "name": "Channel",
            "is_public": False
        })
>       channel = response.json()

http_tests/standup_http_test.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7f33d0d406a0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7f33d15ee9f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
___________________ test_http_standup_active_v1_correct_time ___________________

user1 = {'auth_user_id': 0, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg'}

    def test_http_standup_active_v1_correct_time(user1):
        response = requests.post(f"{url}channels/create/v2", json={
            token: user1[token],
            "name": "Channel1",
            "is_public": False
        })
>       channel1 = response.json()

http_tests/standup_http_test.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7f33d0d406a0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7f33d15ee9f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
____________________ test_http_standup_send_v1_invalid_cID _____________________

user1 = {'auth_user_id': 0, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg'}

    def test_http_standup_send_v1_invalid_cID(user1):
        invalid_cID = -1
        response = requests.post(f"{url}standup/send/v1", json={
            token: user1[token],
            cID: invalid_cID,
            "message": "Hello"
        })
>       assert response.status_code == 400
E       assert 403 == 400
E         +403
E         -400

http_tests/standup_http_test.py:202: AssertionError
__________________ test_http_standup_send_v1_invalid_message ___________________

user1 = {'auth_user_id': 0, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg'}

    def test_http_standup_send_v1_invalid_message(user1):
        invalid_message = '?' * 1001
        response = requests.post(f"{url}channels/create/v2", json={
            "token": user1[token],
            "name": "Channel1",
            "is_public": True
        })
>       channel = response.json()

http_tests/standup_http_test.py:212: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7f33d0d406a0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7f33d15ee9f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
__________________ test_http_standup_send_v1_inactive_standup __________________

user1 = {'auth_user_id': 0, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg'}

    def test_http_standup_send_v1_inactive_standup(user1):
        response = requests.post(f"{url}channels/create/v2", json={
            "token": user1[token],
            "name": "Channel1",
            "is_public": True
        })
>       channel = response.json()

http_tests/standup_http_test.py:235: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7f33d0d406a0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7f33d15ee9f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
____________________ test_http_standup_send_v1_invalid_user ____________________

user1 = {'auth_user_id': 0, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg'}
user2 = {'auth_user_id': 1, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo'}

    def test_http_standup_send_v1_invalid_user(user1, user2):
        response = requests.post(f"{url}channels/create/v2", json={
            "token": user1[token],
            "name": "Channel1",
            "is_public": False
        })
>       channel = response.json()

http_tests/standup_http_test.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7f33d0d406a0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7f33d15ee9f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
____________________ test_http_standup_send_v1_one_message _____________________

user1 = {'auth_user_id': 0, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg'}

    def test_http_standup_send_v1_one_message(user1):
        response = requests.post(f"{url}channels/create/v2", json={
            "token": user1[token],
            "name": "Channel1",
            "is_public": False
        })
>       channel = response.json()

http_tests/standup_http_test.py:267: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7f33d0d406a0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7f33d15ee9f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
__________________ test_http_standup_send_v1_correct_channel ___________________

user1 = {'auth_user_id': 0, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg'}

    def test_http_standup_send_v1_correct_channel(user1):
        response = requests.post(f"{url}channels/create/v2", json={
            "token": user1[token],
            "name": "Channel1",
            "is_public": False
        })
>       channel = response.json()

http_tests/standup_http_test.py:300: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7f33d0d406a0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7f33d15ee9f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
_________________ test_http_standup_send_v1_multiple_messages __________________

user1 = {'auth_user_id': 0, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjowfQ.mNX5f58rMYtTkp9fZydVCSZAXxviyhR8_I5RvFgXpeg'}
user2 = {'auth_user_id': 1, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uX2lkIjowLCJ1c2VyX2lkIjoxfQ.5xbRn_BBsTLXugTHkmPy2IGl5OTWXb7MWn1d_NYdOGo'}

    def test_http_standup_send_v1_multiple_messages(user1, user2):
        response = requests.post(f"{url}channels/create/v2", json={
            "token": user1[token],
            "name": "Channel",
            "is_public": False
        })
>       channel = response.json()

http_tests/standup_http_test.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7f33d0d406a0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Invalid token</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7f33d15ee9f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
________________________ test_http_user_profile_errors _________________________

user1 = {'auth_user_id': 562, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU2MiwibG9naW5fdGltZSI6MTYyMDA1Mjc3MCwic2FsdCI6IjM4OWRkN2YxLTdmODItNDE4Yi1iNWIyLWY5ZDg1YWI2NjI2NyJ9.ZsfhsufAHx82Va15Gdjy8goamW7XR4mKvtjyuLyxC6g'}

    def test_http_user_profile_errors(user1):
    
        response = requests.post(f"{url}user/profile/uploadphoto/v1", json={'token':user1[tok], 'img_url':"https://i.pinimg.com/originals/05/1b/7d/051b7d93394fc94c082f1801bc4ccfb2.jpg", 'x_start' : -1 , 'y_start': -1, 'x_end': 500, 'y_end': 500})
        assert response.status_code == 400
    
        response1 = requests.post(f"{url}user/profile/uploadphoto/v1", json={'token':user1[tok], 'img_url':"https://i.pinimg.com/originals/05/1b/7d/051b7d93394fc94c082f1801bc4ccfb2.jpg", 'x_start' : 0 , 'y_start': 0, 'x_end': 1000, 'y_end': 1000})
        assert response1.status_code == 400
    
        response2 = requests.post(f"{url}user/profile/uploadphoto/v1", json={'token':user1[tok], 'img_url':"https://i.pinimg.com/originals/05/1b/7d/051b7d93394fc94c082f1801bc4ccfb2.jpg", 'x_start' : -1 , 'y_start': -1, 'x_end': 500, 'y_end': 500})
        assert response2.status_code == 400
    
        response3 = requests.post(f"{url}user/profile/uploadphoto/v1", json={'token':user1[tok], 'img_url':"http://agsgasg.com/nicklam/04/2/hiiiii.jpg", 'x_start' : 0 , 'y_start': 0, 'x_end': 500, 'y_end': 500})
>       assert response3.status_code == 400
E       assert 500 == 400
E         +500
E         -400

http_tests/user_http_test.py:83: AssertionError
________________________ test_http_user_profile_default ________________________

user1 = {'auth_user_id': 563, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU2MywibG9naW5fdGltZSI6MTYyMDA1Mjc3MCwic2FsdCI6IjM0NTA4NGM1LWEyNWYtNDFmYy1iZmM4LWRlYzMwMGJiOTc0YSJ9.qqKs3p_H1hdpvr5THzcU0aZIxXlzPmebu4HrLsDa158'}

    def test_http_user_profile_default(user1):
    
        response = requests.get(f"{url}user/profile/v2", params={'token': user1['token'], 'u_id': user1['auth_user_id']})
        expected = response.json()
>       assert expected == {
            'user':
            {
            'u_id': user1[AuID],
            'email': "caricoleman@gmail.com",
            'name_first': 'cari',
            'name_last': 'coleman',
            'handle_str': 'caricoleman',
            'profile_img_url': f"{url}static/default.jpg",
            }
        }
E       AssertionError: assert {'user': {'email': 'caricoleman@gmail.com',\n          'handle_str': 'caricoleman',\n          'name_first': 'cari',\n          'name_last': 'coleman',\n          'profile_img_url': '',\n          'u_id': 563}} == {'user': {'email': 'caricoleman@gmail.com',\n          'handle_str': 'caricoleman',\n          'name_first': 'cari',\n          'name_last': 'coleman',\n          'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',\n          'u_id': 563}}
E         Differing items:
E         {'user': {'email': 'caricoleman@gmail.com', 'handle_str': 'caricoleman', 'name_first': 'cari', 'name_last': 'coleman', ...}} != {'user': {'email': 'caricoleman@gmail.com', 'handle_str': 'caricoleman', 'name_first': 'cari', 'name_last': 'coleman', ...}}
E         Full diff:
E           {
E            'user': {'email': 'caricoleman@gmail.com',
E                     'handle_str': 'caricoleman',
E                     'name_first': 'cari',
E                     'name_last': 'coleman',
E         -           'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',
E         +           'profile_img_url': '',
E                     'u_id': 563},
E           }

http_tests/user_http_test.py:93: AssertionError
________________________ test_http_user_profile_change _________________________

user1 = {'auth_user_id': 564, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU2NCwibG9naW5fdGltZSI6MTYyMDA1Mjc3MCwic2FsdCI6IjAzMTU3ZWMxLTc2ODktNGYwMS05YmRhLWE3MDc3NGI0NGZmOSJ9.u2rcHL9T5piBXbpSkptlH0vuAAdUg1JEpAB0kgo-nvk'}

    def test_http_user_profile_change(user1):
    
        requests.post(f"{url}user/profile/uploadphoto/v1", json={'token':user1[tok], 'img_url':"https://i.pinimg.com/originals/05/1b/7d/051b7d93394fc94c082f1801bc4ccfb2.jpg", 'x_start' : 0 , 'y_start': 0, 'x_end': 500, 'y_end': 500})
        response = requests.get(f"{url}user/profile/v2", params={'token': user1['token'], 'u_id': user1['auth_user_id']})
        expected = response.json()
>       assert expected == {
            'user':
            {
            'u_id': user1[AuID],
            'email': "caricoleman@gmail.com",
            'name_first': 'cari',
            'name_last': 'coleman',
            'handle_str': 'caricoleman',
            'profile_img_url': f"{url}static/{user1[AuID]}.jpg",
            }
        }
E       AssertionError: assert {'user': {'email': 'caricoleman@gmail.com',\n          'handle_str': 'caricoleman',\n          'name_first': 'cari',\n          'name_last': 'coleman',\n          'profile_img_url': 'http://127.0.0.1:60811/static/564-565.jpeg',\n          'u_id': 564}} == {'user': {'email': 'caricoleman@gmail.com',\n          'handle_str': 'caricoleman',\n          'name_first': 'cari',\n          'name_last': 'coleman',\n          'profile_img_url': 'http://127.0.0.1:60811/static/564.jpg',\n          'u_id': 564}}
E         Differing items:
E         {'user': {'email': 'caricoleman@gmail.com', 'handle_str': 'caricoleman', 'name_first': 'cari', 'name_last': 'coleman', ...}} != {'user': {'email': 'caricoleman@gmail.com', 'handle_str': 'caricoleman', 'name_first': 'cari', 'name_last': 'coleman', ...}}
E         Full diff:
E           {
E            'user': {'email': 'caricoleman@gmail.com',
E                     'handle_str': 'caricoleman',
E                     'name_first': 'cari',
E                     'name_last': 'coleman',
E         -           'profile_img_url': 'http://127.0.0.1:60811/static/564.jpg',
E         +           'profile_img_url': 'http://127.0.0.1:60811/static/564-565.jpeg',
E         ?                                                                ++++   +
E                     'u_id': 564},
E           }

http_tests/user_http_test.py:111: AssertionError
_________________________ test_http_user_setname_valid _________________________

user1 = {'auth_user_id': 568, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU2OCwibG9naW5fdGltZSI6MTYyMDA1Mjc3MCwic2FsdCI6ImFmODQxZGIxLTRkY2QtNDkzOC04MDRkLTFlYTE2ZjUwN2ExYiJ9.O4quSwGrExlYXrWEtmRMnDMZ8HpiQDMW9a-_r3Y-WSw'}

    def test_http_user_setname_valid(user1):
        user_data_1 = requests.post(f"{url}auth/login/v2", json={'email': "caricoleman@gmail.com", "password": "1234567"}).json()
        response_1 = requests.put(f"{url}user/profile/setname/v2", json={'token': user_data_1['token'], 'name_first': 'kari', 'name_last': 'koleman'})
        payload_1 = response_1.json()
        assert payload_1 == {}
        response_2 = requests.get(f"{url}user/profile/v2", params={'token': user_data_1['token'], 'u_id': 0})
>       payload_2 = response_2.json()

http_tests/user_http_test.py:137: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7f33d0d406a0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>0 is not a valid ID</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7f33d15ee9f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
________________________ test_http_user_setemail_valid _________________________

user1 = {'auth_user_id': 573, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU3MywibG9naW5fdGltZSI6MTYyMDA1Mjc3MCwic2FsdCI6ImE4NjM0NjBjLWRmZjctNDA3NS1hZjNmLTc4YjQ4YmJiODg1YyJ9.ReMFJcq5ihpWC8WmMyXhCMa7yvtpTfYwlsP5ZxBCUIs'}

    def test_http_user_setemail_valid(user1):
        user_data_1 = requests.post(f"{url}auth/login/v2", json={'email': "caricoleman@gmail.com", "password": "1234567"}).json()
    
        response_1 = requests.put(f"{url}user/profile/setemail/v2", json={'token': user_data_1['token'], 'email': 'karicoleman@gmail.com'})
        payload_1 = response_1.json()
        assert payload_1 == {}
        response_2 = requests.get(f"{url}user/profile/v2", params={'token': user_data_1['token'], 'u_id': user_data_1['auth_user_id']})
        payload_2 = response_2.json()
>       assert payload_2 == {
            'user':
            {
            'u_id': 0,
            'email': "karicoleman@gmail.com",
            'name_first': 'cari',
            'name_last': 'coleman',
            'handle_str': 'caricoleman',
            'profile_img_url': f"{url}static/default.jpg"
            }
        }
E       AssertionError: assert {'user': {'email': 'karicoleman@gmail.com',\n          'handle_str': 'caricoleman',\n          'name_first': 'cari',\n          'name_last': 'coleman',\n          'profile_img_url': '',\n          'u_id': 573}} == {'user': {'email': 'karicoleman@gmail.com',\n          'handle_str': 'caricoleman',\n          'name_first': 'cari',\n          'name_last': 'coleman',\n          'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',\n          'u_id': 0}}
E         Differing items:
E         {'user': {'email': 'karicoleman@gmail.com', 'handle_str': 'caricoleman', 'name_first': 'cari', 'name_last': 'coleman', ...}} != {'user': {'email': 'karicoleman@gmail.com', 'handle_str': 'caricoleman', 'name_first': 'cari', 'name_last': 'coleman', ...}}
E         Full diff:
E           {
E            'user': {'email': 'karicoleman@gmail.com',
E                     'handle_str': 'caricoleman',
E                     'name_first': 'cari',
E                     'name_last': 'coleman',
E         -           'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',
E         +           'profile_img_url': '',
E         -           'u_id': 0},
E         ?                   ^
E         +           'u_id': 573},
E         ?                   ^^^
E           }

http_tests/user_http_test.py:183: AssertionError
________________________ test_http_user_sethandle_valid ________________________

user1 = {'auth_user_id': 577, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU3NywibG9naW5fdGltZSI6MTYyMDA1Mjc3MCwic2FsdCI6ImQ2MjNkMjEyLTBkMzYtNDU5OC04ODA2LWY4OWE5ODYyZTEzYSJ9.jsftHAbgoTOonBCYzMO-rwNv-yNOq3zsG3OQ-hwiAJg'}

    def test_http_user_sethandle_valid(user1):
        user_data_1 = requests.post(f"{url}auth/login/v2", json={'email': "caricoleman@gmail.com", "password": "1234567"}).json()
        response_1 = requests.put(f"{url}user/profile/sethandle/v1", json={'token': user_data_1['token'], 'handle_str': 'karikoleman'})
        payload_1 = response_1.json()
        assert payload_1 == {}
        response_2 = requests.get(f"{url}user/profile/v2", params={'token': user_data_1['token'], 'u_id': user_data_1['auth_user_id']})
        payload_2 = response_2.json()
>       assert payload_2 == {
            'user':
            {
            'u_id': 0,
            'email': "caricoleman@gmail.com",
            'name_first': 'cari',
            'name_last': 'coleman',
            'handle_str': 'karikoleman',
            'profile_img_url': f"{url}static/default.jpg"
            }
        }
E       AssertionError: assert {'user': {'email': 'caricoleman@gmail.com',\n          'handle_str': 'karikoleman',\n          'name_first': 'cari',\n          'name_last': 'coleman',\n          'profile_img_url': '',\n          'u_id': 577}} == {'user': {'email': 'caricoleman@gmail.com',\n          'handle_str': 'karikoleman',\n          'name_first': 'cari',\n          'name_last': 'coleman',\n          'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',\n          'u_id': 0}}
E         Differing items:
E         {'user': {'email': 'caricoleman@gmail.com', 'handle_str': 'karikoleman', 'name_first': 'cari', 'name_last': 'coleman', ...}} != {'user': {'email': 'caricoleman@gmail.com', 'handle_str': 'karikoleman', 'name_first': 'cari', 'name_last': 'coleman', ...}}
E         Full diff:
E           {
E            'user': {'email': 'caricoleman@gmail.com',
E                     'handle_str': 'karikoleman',
E                     'name_first': 'cari',
E                     'name_last': 'coleman',
E         -           'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',
E         +           'profile_img_url': '',
E         -           'u_id': 0},
E         ?                   ^
E         +           'u_id': 577},
E         ?                   ^^^
E           }

http_tests/user_http_test.py:219: AssertionError
________________ test_http_user_sethandle_invalid_handle_in_use ________________

user1 = {'auth_user_id': 580, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU4MCwibG9naW5fdGltZSI6MTYyMDA1Mjc3MCwic2FsdCI6ImY1MTJhNzBlLWFmOTgtNGUzNC05YWIyLTAxNTE1N2ExYzc5ZCJ9.GOr0aIRpkAhD4MU3XA68AYWsa6halV5UqVU9XD0jc00'}
user2 = {'auth_user_id': 581, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU4MSwibG9naW5fdGltZSI6MTYyMDA1Mjc3MCwic2FsdCI6ImQ5NTc5OWM2LTQ5YjUtNDY3NS04OWNiLTczMDZhODU2MjFlOSJ9.LtkAt8bhQ3L3tViMuGQXy_ml5oUT-4B83d5F-CARVF4'}

    def test_http_user_sethandle_invalid_handle_in_use(user1,user2):
        user_data_1 = requests.post(f"{url}auth/login/v2", json={'email': "caricoleman@gmail.com", "password": "1234567"}).json()
        response_1 = requests.put(f"{url}user/profile/sethandle/v1", json={'token': user_data_1['token'], 'handle_str': 'kari'})
        payload_1 = response_1.json()
        assert payload_1 == {}
        user_data_2 = requests.post(f"{url}auth/login/v2", json={'email': "ericamondy@gmail.com", "password": "1234567"}).json()
        response_2 = requests.put(f"{url}user/profile/sethandle/v1", json={'token': user_data_2['token'], 'handle_str': 'kari'})
>       assert response_2.status_code == 400
E       assert 200 == 400
E         +200
E         -400

http_tests/user_http_test.py:251: AssertionError
__________________________ test_http_users_all_valid ___________________________

user1 = {'auth_user_id': 582, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU4MiwibG9naW5fdGltZSI6MTYyMDA1Mjc3MSwic2FsdCI6IjJmMzdmYThkLWIyYTEtNGZhOS04ZTBkLTRkMWY0YzIwNDUwYyJ9.N3rptM26uWzMVMk4R9UWg0rD6fVIEzY9Zyw3AfFnjbc'}
user2 = {'auth_user_id': 583, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU4MywibG9naW5fdGltZSI6MTYyMDA1Mjc3MSwic2FsdCI6ImZjNTA2MzcwLWI1NGEtNDdlNC1hNjZhLTFmOGI1ZWEyM2Y4MCJ9.VsMXYbIwhIpPT4cZC9l0QOgaKNxkAEBeO_UsFmB-gvU'}

    def test_http_users_all_valid(user1,user2):
        user_data_1 = requests.post(f"{url}auth/login/v2", json={'email': "caricoleman@gmail.com", "password": "1234567"}).json()
        requests.post(f"{url}auth/login/v2", json={'email': "ericamondy@gmail.com", "password": "1234567"})
        response = requests.get(f"{url}users/all/v1", params={'token': user_data_1['token']})
        payload = response.json()
>       assert payload == {
                'users':
                [{
                'u_id': 0,
                'email': "caricoleman@gmail.com",
                'name_first': 'cari',
                'name_last': 'coleman',
                'handle_str': 'caricoleman',
                'profile_img_url': f"{url}static/default.jpg"
                },
                {
                'u_id': 1,
                'email': "ericamondy@gmail.com",
                'name_first': 'erica',
                'name_last': 'mondy',
                'handle_str': 'ericamondy',
                'profile_img_url': f"{url}static/default.jpg"
                }]
        }
E       AssertionError: assert {'users': [{'email': 'caricoleman@gmail.com',\n            'handle_str': 'caricoleman',\n            'name_first': 'cari',\n            'name_last': 'coleman',\n            'profile_img_url': '',\n            'u_id': 582},\n           {'email': 'ericamondy@gmail.com',\n            'handle_str': 'ericamondy',\n            'name_first': 'erica',\n            'name_last': 'mondy',\n            'profile_img_url': '',\n            'u_id': 583}]} == {'users': [{'email': 'caricoleman@gmail.com',\n            'handle_str': 'caricoleman',\n            'name_first': 'cari',\n            'name_last': 'coleman',\n            'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',\n            'u_id': 0},\n           {'email': 'ericamondy@gmail.com',\n            'handle_str': 'ericamondy',\n            'name_first': 'erica',\n            'name_last': 'mondy',\n            'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',\n            'u_id': 1}]}
E         Differing items:
E         {'users': [{'email': 'caricoleman@gmail.com', 'handle_str': 'caricoleman', 'name_first': 'cari', 'name_last': 'coleman', ...}, {'email': 'ericamondy@gmail.com', 'handle_str': 'ericamondy', 'name_first': 'erica', 'name_last': 'mondy', ...}]} != {'users': [{'email': 'caricoleman@gmail.com', 'handle_str': 'caricoleman', 'name_first': 'cari', 'name_last': 'coleman', ...}, {'email': 'ericamondy@gmail.com', 'handle_str': 'ericamondy', 'name_first': 'erica', 'name_last': 'mondy', ...}]}
E         Full diff:
E           {
E            'users': [{'email': 'caricoleman@gmail.com',
E                       'handle_str': 'caricoleman',
E                       'name_first': 'cari',
E                       'name_last': 'coleman',
E         -             'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',
E         +             'profile_img_url': '',
E         -             'u_id': 0},
E         ?                     ^
E         +             'u_id': 582},
E         ?                     ^^^
E                      {'email': 'ericamondy@gmail.com',
E                       'handle_str': 'ericamondy',
E                       'name_first': 'erica',
E                       'name_last': 'mondy',
E         -             'profile_img_url': 'http://127.0.0.1:60811/static/default.jpg',
E         +             'profile_img_url': '',
E         -             'u_id': 1}],
E         ?                     ^
E         +             'u_id': 583}],
E         ?                     ^^^
E           }

http_tests/user_http_test.py:259: AssertionError
___________________________ test_http_users_stats_v1 ___________________________

user1 = {'auth_user_id': 584, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU4NCwibG9naW5fdGltZSI6MTYyMDA1Mjc3MSwic2FsdCI6IjBhMmNhMTA1LTNkMzAtNDU4Ni05NTRhLWNlNmZjZmRlNzMyYSJ9.VtJMLX87a4nbSmU9EPlerBlpP9Nrz0_1wsRcQ7CRlSk'}
user2 = {'auth_user_id': 585, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU4NSwibG9naW5fdGltZSI6MTYyMDA1Mjc3MSwic2FsdCI6ImQ3ZDhhNmE4LTcxOTAtNDBiYS04ZDlmLTc0YTQ5OGRhZjJlMCJ9.88Yfj_aLSPGPL1oGIEYXVwVLDZ4TECNzxtjq2vY-OB8'}
user3 = {'auth_user_id': 586, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU4NiwibG9naW5fdGltZSI6MTYyMDA1Mjc3MSwic2FsdCI6IjA0ZTA5ODc1LTkzNjMtNDgzNi1iMWQ0LWVkZmIyYzIzZGVkYSJ9.4MP3qd1JUr-oZhdpGS_JBWcG4cwiRJ8ztTKGHm291J8'}
user4 = {'auth_user_id': 587, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU4NywibG9naW5fdGltZSI6MTYyMDA1Mjc3MSwic2FsdCI6IjIyZjcwMjE2LTUwMWYtNGM0NS05OThkLWVkYWEyZGU2OWJhMSJ9.0E69zcTiRLZg0-goQU-bSuKBAQg3FO_-tmjITzjYUXs'}

    def test_http_users_stats_v1(user1, user2, user3, user4):
    
        responseChannel = requests.post(f"{url}channels/create/v2", json={
            "token": user1[tok],
            "name": 'Channel1',
            "is_public": True}
        )
        channel1 = responseChannel.json()
    
        requests.post(f"{url}message/send/v2", json={
            "token": user1[tok],
            "channel_id": channel1[cID],
            "message": "Heyyyy"
        })
    
>       output1 = requests.get(f"{url}users/stats/v1", params={'token': user1[tok]}).json()

http_tests/user_http_test.py:294: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/requests/models.py:900: in json
    return complexjson.loads(self.text, **kwargs)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/__init__.py:525: in loads
    return _default_decoder.decode(s)
/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:370: in decode
    obj, end = self.raw_decode(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <simplejson.decoder.JSONDecoder object at 0x7f33d0d406a0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'
idx = 0, _w = <built-in method match of re.Pattern object at 0x7f33d15ee9f0>
_PY3 = True

    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):
        """Decode a JSON document from ``s`` (a ``str`` or ``unicode``
        beginning with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
        Optionally, ``idx`` can be used to specify an offset in ``s`` where
        the JSON document begins.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        if idx < 0:
            # Ensure that raw_decode bails on negative indexes, the regex
            # would otherwise mask this behavior. #98
            raise JSONDecodeError('Expecting value', s, idx)
        if _PY3 and not isinstance(s, str):
            raise TypeError("Input string must be text, not bytes")
        # strip UTF-8 bom
        if len(s) > idx:
            ord0 = ord(s[idx])
            if ord0 == 0xfeff:
                idx += 1
            elif ord0 == 0xef and s[idx:idx + 3] == '\xef\xbb\xbf':
                idx += 3
>       return self.scan_once(s, idx=_w(s, idx).end())
E       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/import/kamen/3/cs1531/.local/lib/python3.7/site-packages/simplejson/decoder.py:400: JSONDecodeError
_____________________________ test_http_user_stat ______________________________

user1 = {'auth_user_id': 590, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU5MCwibG9naW5fdGltZSI6MTYyMDA1Mjc3MSwic2FsdCI6IjM5NzE3MmU1LWFhZGEtNDIyNC04YTY3LWM3MTI0ZjlmZDZjNyJ9.los3oOEpA6GPmK-EYZ5DjBW7fMvc0LTNs58AQw2EDoU'}
user2 = {'auth_user_id': 591, 'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjU5MSwibG9naW5fdGltZSI6MTYyMDA1Mjc3MSwic2FsdCI6IjI4ZDkwMzU5LTJmMTQtNDFhMC05MGY3LTk2ZGIzZDQ5NjRkNCJ9.FEe51B5vLj_BEhoJLKLZKCBG2n8rwWoHktlg2NS0qy8'}

    def test_http_user_stat(user1,user2):
    
        responseChannel = requests.post(f"{url}channels/create/v2", json={
            "token": user1[tok],
            "name": 'Channel1',
            "is_public": True}
        )
        channel1 = responseChannel.json()
    
        requests.post(f"{url}channel/join/v2", json={
            "token": user2[tok],
            "channel_id": channel1[cID]
        })
    
        requests.post(f"{url}dm/create/v1", json={
            "token": user1[tok],
            "u_ids": [user2[AuID]]
        })
    
        requests.post(f"{url}message/send/v2", json={
            "token": user1[tok],
            "channel_id": channel1[cID],
            "message": "Sup?"
        })
    
        output = requests.get(f"{url}user/stats/v1", params={'token': user1[tok]}).json()
    
        assert len(output["user_stats"]['channels_joined']) == 2
        assert len(output["user_stats"]['dms_joined']) == 2
        assert len(output["user_stats"]['messages_sent']) == 2
        assert output["user_stats"]["involvement_rate"] == 1
    
        message = requests.post(f"{url}message/send/v2", json={
            "token": user2[tok],
            "channel_id": channel1[cID],
            "message": "hi"
        }).json()
    
        output2 = requests.get(f"{url}user/stats/v1", params={'token': user1[tok]}).json()
    
        assert len(output2["user_stats"]['channels_joined']) == 2
        assert len(output2["user_stats"]['dms_joined']) == 2
        assert len(output2["user_stats"]['messages_sent']) == 2
        assert output2["user_stats"]["involvement_rate"] == 0.75
    
    
        requests.delete(f"{url}message/remove/v1", json={
            "token": user1[tok],
            "message_id": message[mID]
        })
    
        output3 = requests.get(f"{url}user/stats/v1", params={'token': user1[tok]}).json()
    
>       assert output3["user_stats"]["involvement_rate"] ==  0.6666666666666666
E       assert 1.0 == 0.6666666666666666
E         +1.0
E         -0.6666666666666666

http_tests/user_http_test.py:429: AssertionError
=========================== short test summary info ============================
FAILED http_tests/admin_http_test.py::test_http_admin_user_remove_valid - sim...
FAILED http_tests/admin_http_test.py::test_http_userpermissions_change - Asse...
FAILED http_tests/admin_http_test.py::test_http_admin_user_remove_valid - sim...
FAILED http_tests/admin_http_test.py::test_http_userpermissions_change - Asse...
FAILED http_tests/auth_http_test.py::test_http_auth_login_valid - AssertionEr...
FAILED http_tests/auth_http_test.py::test_http_auth_register_valid - Assertio...
FAILED http_tests/auth_http_test.py::test_http_auth_logout_valid - Failed: DI...
FAILED http_tests/auth_http_test.py::test_http_auth_passwordreset_valid_email
FAILED http_tests/channel_http_test.py::test_http_channel_invite - AssertionE...
FAILED http_tests/channel_http_test.py::test_http_channel_details - Assertion...
FAILED http_tests/channel_http_test.py::test_http_channel_leave - AssertionEr...
FAILED http_tests/channel_http_test.py::test_http_channel_join - AssertionErr...
FAILED http_tests/channel_http_test.py::test_http_channel_addowner - Assertio...
FAILED http_tests/channel_http_test.py::test_http_channel_removeowner - Asser...
FAILED http_tests/dm_http_test.py::test_http_dm_details_valid - AssertionErro...
FAILED http_tests/dm_http_test.py::test_http_dm_invite_access_error - assert ...
FAILED http_tests/dm_http_test.py::test_http_dm_messages - assert 50 == -1
FAILED http_tests/echo_http_test.py::test_echo - json.decoder.JSONDecodeError...
FAILED http_tests/message_http_test.py::test_http_message_sendlater - assert ...
FAILED http_tests/message_http_test.py::test_http_message_sendlaterdm - asser...
FAILED http_tests/other_http_test.py::test_http_search_channels - assert False
FAILED http_tests/other_http_test.py::test_http_search_dms - assert False
FAILED http_tests/standup_http_test.py::test_http_standup_start_v1_invalid_cID
FAILED http_tests/standup_http_test.py::test_http_standup_start_v1_active_standup
FAILED http_tests/standup_http_test.py::test_http_standup_start_v1_user_not_in
FAILED http_tests/standup_http_test.py::test_http_standup_start_v1 - simplejs...
FAILED http_tests/standup_http_test.py::test_http_standup_active_v1_invalid_cID
FAILED http_tests/standup_http_test.py::test_http_standup_active_v1 - simplej...
FAILED http_tests/standup_http_test.py::test_http_standup_active_v1_correct_time
FAILED http_tests/standup_http_test.py::test_http_standup_send_v1_invalid_cID
FAILED http_tests/standup_http_test.py::test_http_standup_send_v1_invalid_message
FAILED http_tests/standup_http_test.py::test_http_standup_send_v1_inactive_standup
FAILED http_tests/standup_http_test.py::test_http_standup_send_v1_invalid_user
FAILED http_tests/standup_http_test.py::test_http_standup_send_v1_one_message
FAILED http_tests/standup_http_test.py::test_http_standup_send_v1_correct_channel
FAILED http_tests/standup_http_test.py::test_http_standup_send_v1_multiple_messages
FAILED http_tests/user_http_test.py::test_http_user_profile_errors - assert 5...
FAILED http_tests/user_http_test.py::test_http_user_profile_default - Asserti...
FAILED http_tests/user_http_test.py::test_http_user_profile_change - Assertio...
FAILED http_tests/user_http_test.py::test_http_user_setname_valid - simplejso...
FAILED http_tests/user_http_test.py::test_http_user_setemail_valid - Assertio...
FAILED http_tests/user_http_test.py::test_http_user_sethandle_valid - Asserti...
FAILED http_tests/user_http_test.py::test_http_user_sethandle_invalid_handle_in_use
FAILED http_tests/user_http_test.py::test_http_users_all_valid - AssertionErr...
FAILED http_tests/user_http_test.py::test_http_users_stats_v1 - simplejson.er...
FAILED http_tests/user_http_test.py::test_http_user_stat - assert 1.0 == 0.66...
======================== 46 failed, 85 passed in 34.58s ========================
