import src.data
from src.dm import dm_details_v1, dm_list_v1, dm_create_v1, dm_remove_v1, dm_invite_v1, dm_leave_v1, dm_messages_v1
from src.error import AccessError, InputError
import src.auth, src.channel, src.other
import jwt

AuID    = 'auth_user_id'
uID     = 'u_id'
cID     = 'channel_id'
allMems = 'all_members'
cName   = 'name'
fName   = 'name_first'
lName   = 'name_last'
chans   = 'channels'
token   = 'token'

SECRET = 'MENG'

#! Make sure to clear before every test

def test_dm_details():
    pass

def test_dm_list():
    pass

def test_dm_valid_create():
    src.other.clear_v1()
    #* Ensuring dm_id and dm_name are correct when creating valid dm
    '''
    Register two users
    Creator of the dm invites other user to DM
    Ensure outputs are correct
    '''
    pass

def test_dm_id_increasing():
    src.other.clear_v1()
    #* Only adding channels
    '''
    Register two users
    Make like 3 dms, making sure that all outputs are correct
    '''

    src.other.clear_v1()
    #* One where we remove channel(s) in the middle but not the end
    '''
    Register two users
    Add 3 dms
    Remove the middle one
    Add another dm
    Make sure the dm_id is correct
    '''

    src.other.clear_v1()
    #* One where we remove channel(s) at the end
    '''
    Register two users
    Add 2 dms
    Remove the last one
    Add another dm
    Make sure the dm_id is correct
    '''
    pass

def test_dm_name():
    src.other.clear_v1()
    #* Name of the dm is only autogenerated when creating the dm - doesn't change when there are new/leaving members
    '''
    Register 2 users
    Create a DM
    Add more users
    Make sure DM is still the same name
    Remove OG users
    Make sure DM is still the same name
    '''
    pass

def test_dm_create_errors():
    src.other.clear_v1()
    user1 = src.auth.auth_register_v1("first@gmail.com", "password", "Maccas", "Mckenzie")
    invalid_u_id = -1
    with pytest.raises(InputError):
        dm_create_v1(user1[token], [invalid_u_id])

    src.other.clear_v1()
    user1 = src.auth.auth_register_v1("second@gmail.com", "password", "Yusuf", "Bideen")
    invalid_token = jwt.encode({'hotel?': 'trivago'}, SECRET, algorithm='HS256')
    with pytest.raises(AccessError):
        dm_create_v1(invalid_token, [user1[auth_user_id]])

def test_dm_remove():
    pass

def test_dm_invite():
    pass

def test_dm_leave():
    pass

def test_dm_messages():
    pass
